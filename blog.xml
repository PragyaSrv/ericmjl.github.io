<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Eric Ma's Blog</title>
  <id>urn:uuid:8e5496e4-8606-3632-a35c-1d9694b4313d</id>
  <updated>2017-10-11T00:00:00Z</updated>
  <link href="http://www.ericmjl.com/blog/" />
  <link href="http://www.ericmjl.com/blog.xml" rel="self" />
  <author>
    <name></name>
  </author>
  <generator uri="https://github.com/ajdavis/lektor-atom" version="0.2">Lektor Atom Plugin</generator>
  <entry xml:base="http://www.ericmjl.com/blog/2017/10/11/pypy-impressive/">
    <title type="text">PyPy: Impressive!</title>
    <id>urn:uuid:e634bb3d-8f4b-3088-b8c8-69cc85fc6c13</id>
    <updated>2017-10-11T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/10/11/pypy-impressive/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;A few years on after trying out PyPy for the first time and wrestling with it, I still find it to be pretty awesome.&lt;/p&gt;
&lt;p&gt;Now that PyPy officially supports &lt;code&gt;numpy&lt;/code&gt;, I'm going to profile a few simple statistical simulation tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Computing the mean of a number of random number draws.&lt;/li&gt;
&lt;li&gt;Simulating many coin flips&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll profile each of the tasks four ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pure Python implementation running from the CPython and PyPy interpreters&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numpy&lt;/code&gt; implementation running from the CPython and PyPy interpreters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, how do PyPy and CPython fare? Let's show the results up front first.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../../../../../blog/2017/10/11/pypy-impressive/profile.png&quot;&gt;&lt;img src=&quot;../../../../../blog/2017/10/11/pypy-impressive/profile-sm.png&quot; alt=&quot;Profiling results.&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Click on the image to view a higher resolution chart. The raw recorded measurements can be found &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1QB1hF7Z8SGYjvll8sYCjVYEYAgzL4pjqGt1dbO6B2Co/edit?usp=sharing&quot;&gt;on Google Sheets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's a description of what's happening:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(top-left): PyPy is approx. 10X faster than CPython at computing the mean of 10 million random numbers.&lt;/li&gt;
&lt;li&gt;(top-right): When both are running &lt;code&gt;numpy&lt;/code&gt;, the speed is identical.&lt;/li&gt;
&lt;li&gt;(bottom-left): When simulating coin flips, PyPy with a custom &lt;code&gt;binomial()&lt;/code&gt; function is about 3X faster than CPython.&lt;/li&gt;
&lt;li&gt;(bottom-right): When using &lt;code&gt;numpy&lt;/code&gt; instead, there is a bottleneck, and PyPy fails badly compared to CPython.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's pretty clear that when PyPy is dealing with &quot;pure&quot; data (i.e. not having to pass data between Python and C), PyPy runs very, very fast, and, at least in the scenarios tested here, it performs faster than the CPython interpreter. This is consistent with my previous observations, and probably explains why PyPy is very good for code that is very repetitive; the JIT tracer really speeds things up.&lt;/p&gt;
&lt;p&gt;That last plot (bottom-right) is a big curiosity. Using the code below, I measured the random number generation is actually just as fast as it should be using CPython, but that PyPy failed badly when I was passing in a &lt;code&gt;numpy&lt;/code&gt; array to the &lt;code&gt;Counter()&lt;/code&gt; object (from the standard library). I'm not sure what is happening behind-the-scenes, but I have reached out to the PyPy developers to ask what's going on, and will update this post at a later date.&lt;/p&gt;
&lt;p&gt;So, what does this mean? It means that for pure Python code, PyPy can be a very powerful way to accelerate your code. One example I can imagine is agent-based simulations using Python objects. Another example that comes to mind is running a web server that only ever deals with strings, floats and JSONs (in contrast to matrix-heavy scientific computing).&lt;/p&gt;
&lt;p&gt;Now, for those who are curious, here's the source code for the &lt;strong&gt;pure Python implementation of the mean of random numbers&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Mean of 10 million random number draws.&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1E7&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rnds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rnds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rnds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;{} seconds&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here's the source code for the &lt;strong&gt;&lt;code&gt;numpy&lt;/code&gt; implementation of the mean of random numbers&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1E7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;{} seconds&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, here's the source code for &lt;strong&gt;coin flips in pure Python&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Simulate 10 million biased coin flips with p = 0.3&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bernoulli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bernoulli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1E7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;{} seconds&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally, source code for &lt;strong&gt;coin flips using &lt;code&gt;numpy&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy.random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binomial&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;coinflips&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binomial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1E7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Time for numpy coinflips: {} seconds&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coinflips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;{} seconds&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/10/10/pydata-nyc-2017/">
    <title type="text">PyData NYC 2017</title>
    <id>urn:uuid:68ffb19b-9905-3852-8f3f-a1a3e04a705c</id>
    <updated>2017-10-10T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/10/10/pydata-nyc-2017/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;I'm seriously looking forward to PyData NYC this year -- there's a great lineup of talks that I'm particularly looking forward to hearing! The theme for my set of must-see talks this year is &quot;Bayesian machine learning&quot; - there's much for me to learn!&lt;/p&gt;
&lt;p&gt;The first is by my fellow Boston Bayesian &lt;strong&gt;&lt;a href=&quot;https://colindcarroll.com/&quot;&gt;Colin Caroll&lt;/a&gt;&lt;/strong&gt; with his talk titled &lt;a href=&quot;https://pydata.org/nyc2017/schedule/presentation/12/&quot;&gt;Two views on regression with PyMC3 and scikit-learn&lt;/a&gt;. Colin is a mathematician at heart, even though he does software engineering for living now, and I can't wait to hear about regularization strategies!&lt;/p&gt;
&lt;p&gt;The second is by &lt;strong&gt;&lt;a href=&quot;https://pydata.org/nyc2017/speaker/profile/6/&quot;&gt;Nicole Carlson&lt;/a&gt;&lt;/strong&gt;, with her talk titled &lt;a href=&quot;https://pydata.org/nyc2017/schedule/presentation/24/&quot;&gt;Turning PyMC3 into scikit-learn&lt;/a&gt;. Nicole's talk is of interest to me because I've implemented models in PyMC3 before, and now would like to know how to make them reusable!&lt;/p&gt;
&lt;p&gt;The third talk is by &lt;strong&gt;&lt;a href=&quot;https://pydata.org/nyc2017/speaker/profile/118/&quot;&gt;Chaya Stern&lt;/a&gt;&lt;/strong&gt;, with her talk titled &lt;a href=&quot;https://pydata.org/nyc2017/schedule/presentation/53/&quot;&gt;Bayesian inference in computational chemistry&lt;/a&gt;. Super relevant to my work at Novartis!&lt;/p&gt;
&lt;p&gt;The fourth is by my fellow Boston Pythonista &lt;strong&gt;&lt;a href=&quot;https://pydata.org/nyc2017/speaker/profile/34/&quot;&gt;Joe Jevnik&lt;/a&gt;&lt;/strong&gt;, who will be speaking on the first day about his journey into deep learning on some really cool time-series data. He works at Quantopian, BUT the spoiler here is that his talk is NOT about financial data! (I've heard his talk outline already.)&lt;/p&gt;
&lt;p&gt;The fifth is a tutorial by &lt;strong&gt;&lt;a href=&quot;https://pydata.org/nyc2017/speaker/profile/29/&quot;&gt;Jacob Schrieber&lt;/a&gt;&lt;/strong&gt;, with his talk titled &lt;a href=&quot;https://pydata.org/nyc2017/schedule/presentation/30/&quot;&gt;pomegranate: fast and flexible probabilistic modeling in python&lt;/a&gt;. &lt;code&gt;pomegranate&lt;/code&gt;'s API models after the &lt;code&gt;scikit-learn&lt;/code&gt;'s API; with the API being the user-facing interface, and &lt;code&gt;scikit-learn&lt;/code&gt; being the &lt;em&gt;de facto&lt;/em&gt; go-to library for machine learning, I'd be interested to see how much more &lt;code&gt;pomegranate&lt;/code&gt; adds to the ecosystem, particularly w.r.t. Bayesian models.&lt;/p&gt;
&lt;p&gt;There are a swathe of other good talks that I'm expecting to be able to catch online later on. &lt;strong&gt;&lt;a href=&quot;https://matthewrocklin.com/&quot;&gt;Matt Rocklin&lt;/a&gt;&lt;/strong&gt;, who is the lead developer of Dask, has done a ton of work on speeding Python up through parallelism. His talk will be on &lt;a href=&quot;https://pydata.org/nyc2017/schedule/presentation/22/&quot;&gt;the use of Cython &amp; Dask to speed up GeoPandas&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, &lt;strong&gt;&lt;a href=&quot;https://pydata.org/nyc2017/speaker/profile/80/&quot;&gt;Thomas Caswell&lt;/a&gt;&lt;/strong&gt;, one of the &lt;a href=&quot;http://matplotlib.org/&quot;&gt;&lt;code&gt;matplotlib&lt;/code&gt;&lt;/a&gt; lead devs who helped guide my first foray into open source contributions, is giving a tutorial on &lt;a href=&quot;https://pydata.org/nyc2017/schedule/presentation/3/&quot;&gt;developing interactive figures in matplotlib&lt;/a&gt;. Highly recommended if you're into the visualization world!&lt;/p&gt;
&lt;p&gt;Finally, the always-interesting, always entertaining &lt;strong&gt;&lt;a href=&quot;https://pydata.org/nyc2017/schedule/presentation/25/&quot;&gt;en zyme&lt;/a&gt;&lt;/strong&gt; will be speaking on an &lt;a href=&quot;https://pydata.org/nyc2017/schedule/presentation/25/&quot;&gt;interesting topic&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Looking forward to being at the conference, and meeting old and new friends there!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/10/10/recursive-programming-and-dags/">
    <title type="text">Recursive Programming and DAGs</title>
    <id>urn:uuid:651bdb43-752a-3283-a522-17cdc7a276c7</id>
    <updated>2017-10-10T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/10/10/recursive-programming-and-dags/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;Over the past few days, I've found myself using recursive programming to implement a &quot;model specification&quot; system with inheritance for deep learning. The goal here is to enable reproducible computational experiments for particular deep learning hyperparameter sets. Reproducibility is something I learned from the Software/Data Carpentry initiative, thus I wanted to ensure that my own work was reproducible, even if it's not (because of corporate reasons) open-able, because it's the right thing to do.&lt;/p&gt;
&lt;p&gt;So, how do these &quot;model spec&quot; files work? I call them &quot;experiment profiles&quot;, and they specify a bunch of things: &lt;strong&gt;model architecture&lt;/strong&gt;, &lt;strong&gt;training parameters&lt;/strong&gt;, and &lt;strong&gt;data tasks&lt;/strong&gt;. These experiment profiles are stored in YAML files on disk. A profile essentially looks like the following (dummy examples provided, naturally):&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Name: default.yaml&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;data_tasks&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;task1&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;task2&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;task3&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;model_architecture&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;hidden_layers&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;hidden_dropouts&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;training_parameters&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sgd&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;optimizer_options&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;n_epochs&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this YAML file, the key-value pairs essentially match the API of the tooling I've built on top of Keras' API to make myself more productive. (From the example, it should be clear that we're dealing with only feed-forward neural networks and nothing else more complicated.) The key here (pun unintended) is that I have a &lt;code&gt;parent&lt;/code&gt; key-value pair that specifies another experiment profile that I can inherit from.&lt;/p&gt;
&lt;p&gt;Let's call the above example &lt;code&gt;default.yaml&lt;/code&gt;. Let's say I want to run another computational experiment that uses the &lt;code&gt;adam&lt;/code&gt; optimizer instead of plain vanilla &lt;code&gt;sgd&lt;/code&gt;. Instead of re-specifying the entire YAML file, by implementing an inheritance scheme, I can re-specify only the optimizer and optimizer_options.&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Name: adam.yaml&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;default.yaml&amp;quot;&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;training_parameters&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;optimizer&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;adam&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, let's say I find out that 20 epochs (inherited from &lt;code&gt;default.yaml&lt;/code&gt;) is too much for Adam - after all, Adam is one of the most efficient gradient descent algorithms out there - and I want to change it to 3 epochs instead. I can do the following:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Name: adam-3.yaml&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;adam.yaml&amp;quot;&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;training_parameters&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;optimizer_options&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;n_epochs&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Okay, so specifying YAML files with inheritance is all good, but how do I ensure that I get the entire parameter set out correctly, without writing verbose code? This is where the power of recursive programming comes in. Using recursion, I can solve this problem with &lt;strong&gt;a single function that calls itself on one condition, and returns a result on another condition&lt;/strong&gt;. That's a recursive function in its essence.&lt;/p&gt;
&lt;p&gt;The core of this problem is traversing the inheritance path, from &lt;code&gt;adam-3.yaml&lt;/code&gt; to &lt;code&gt;adam.yaml&lt;/code&gt; to &lt;code&gt;default.yaml&lt;/code&gt;. Once I have the inheritance path specified, loading the YAML files as a dictionary becomes the easy part.&lt;/p&gt;
&lt;p&gt;How would this look like in code? Let's take a look at an implementation.&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;yaml&lt;/span&gt; 

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inheritance_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yaml_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    :param str yaml_file: The path to the yaml file of interest.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    :param list path: A list specifying the existing inheritance path. First&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        entry is the file of interest, and parents are recursively appended to&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        the end of the list.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yaml_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;r+&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;parent&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;parent&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inheritance_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;parent&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The most important part of the function is in the &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; block. If I have reached the &quot;root&quot; of the inheritance path, (that is, I have hit &lt;code&gt;default.yaml&lt;/code&gt; which has no parent), then I return the &lt;code&gt;path&lt;/code&gt; traversed. Otherwise, I return into the &lt;code&gt;inheritance_path&lt;/code&gt; function call again, but with an updated &lt;code&gt;path&lt;/code&gt; list, and a different &lt;code&gt;yaml_file&lt;/code&gt; to read. It's a bit like doing a &lt;code&gt;while&lt;/code&gt; loop, but in my opinion, a bit more elegant aesthetically.&lt;/p&gt;
&lt;p&gt;Once I've gotten the path list, I can finally load the parameters using a single function that calls on &lt;code&gt;inheritance_path&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;load_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yaml_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inheritance_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yaml_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yaml_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; 
             &lt;span class=&quot;n&quot;&gt;model_architecture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; 
             &lt;span class=&quot;n&quot;&gt;training_parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# go in reverse!&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;r+&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yaml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the equivalent of traversing a Directed Acyclic Graph (DAG), or in some special cases, a tree data structure, but in a way where we don't have to know the entire tree structure ahead of time. The goal is to reach the root from any node:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root
    |- A
        |- B
        |- C
            |- D
            |- E
    |- F
        |- G
        |- H
        |- I 
            |- J
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, because we only have one pointer in each YAML file to its parent, we have effectively created a &quot;Linked List&quot; that we can use to trace a path back to the &quot;root&quot; node, along the way collecting the information that we need together. By using this method of traversal, we only need to know the neighbors, and at some point (however long it takes), we will reach the root.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;D -&amp;gt; C -&amp;gt; A -&amp;gt; root
E -&amp;gt; C -&amp;gt; A -&amp;gt; root
J -&amp;gt; I -&amp;gt; F -&amp;gt; root
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you were wondering why linked lists, trees and other data structures might be useful as a data scientist, I hope this illustrates on productive example!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/10/7/a-data-scientists-guide-to-environment-variables/">
    <title type="text">A Data Scientist's Guide to Environment Variables</title>
    <id>urn:uuid:3a3bceb7-58a5-3816-8a72-3cbffe8f4742</id>
    <updated>2017-10-07T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/10/7/a-data-scientists-guide-to-environment-variables/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;You might have encountered a piece of software asking you for permission to modify your &lt;code&gt;PATH&lt;/code&gt; variable, or another program's installation instructions cryptically telling you that you have to &quot;set your &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; variable correctly&quot;.&lt;/p&gt;
&lt;p&gt;As a data scientist, you might encounter other environment variable issues when interacting with your compute stack (particularly if you don't have full control over it, like I do). This post is meant to demystify what an environment variable is, and how it gets used in a data science context.&lt;/p&gt;
&lt;h2 id=&quot;what-is-an-environment-variable?&quot;&gt;What Is An Environment Variable?&lt;/h2&gt;&lt;p&gt;First off, let me explain what an environment variable is, by going in-depth into the &lt;code&gt;PATH&lt;/code&gt; environment variable. I'd encourage you to execute the commands here inside your bash terminal (with appropriate modifications -- read the text to figure out what I'm doing!).&lt;/p&gt;
&lt;p&gt;When you log into your computer system, say, your local computer’s terminal or your remote server via SSH, your bash interpreter needs to know where to look for particular programs, such as &lt;code&gt;nano&lt;/code&gt; (the text editor), or &lt;code&gt;git&lt;/code&gt; (your version control software), or your Python executable. This is controlled by your PATH variable. It specifies the paths to folders where your executable programs are found.&lt;/p&gt;
&lt;p&gt;By historical convention, command line programs, such as &lt;code&gt;nano&lt;/code&gt;, &lt;code&gt;which&lt;/code&gt;, and &lt;code&gt;top&lt;/code&gt;, are found in the directory &lt;code&gt;/usr/bin&lt;/code&gt;. (By historical convention, the &lt;code&gt;/bin&lt;/code&gt; folder is for software binaries, which is why they are named &lt;code&gt;/bin&lt;/code&gt;.) These are the ones that are bundled with your operating system, and as such, need special permissions to upgrade.&lt;/p&gt;
&lt;p&gt;Try it out in your terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ which which
/usr/bin/which
$ which top
/usr/bin/top
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Other programs are installed (for whatever reason) into &lt;code&gt;/bin&lt;/code&gt; instead. &lt;code&gt;ls&lt;/code&gt; is one example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ which ls
/bin/ls
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yet other programs might be installed in other special directories:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ which nano
/usr/local/bin/nano
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How does your Bash terminal figure out where to go to look for stuff? It uses the &lt;code&gt;PATH&lt;/code&gt; environment variable. It looks something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo $PATH
/usr/bin:/bin:/usr/local/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The most important thing to remember about the &lt;code&gt;PATH&lt;/code&gt; variable is that it is &quot;colon-delimited&quot;. That is, each directory path is separated by the next using a &quot;colon&quot; (&lt;code&gt;:&lt;/code&gt;) character. The order in which your bash terminal is looking for programs goes from left to right:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/usr/bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/local/bin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On my particular computer, when I type in &lt;code&gt;ls&lt;/code&gt;, my bash interpreter will look inside the &lt;code&gt;/usr/bin&lt;/code&gt; directory first. It'll find that &lt;code&gt;ls&lt;/code&gt; doesn't exist in &lt;code&gt;/usr/bin&lt;/code&gt;, and so it'll move to the next directory, &lt;code&gt;/bin&lt;/code&gt;. Since my &lt;code&gt;ls&lt;/code&gt; exists under &lt;code&gt;/bin&lt;/code&gt;, it'll execute the &lt;code&gt;ls&lt;/code&gt; program from there.&lt;/p&gt;
&lt;p&gt;You can see, then, that this is simultaneously super flexible for customizing your compute environment, yet also potentially super frustrating if a program modified your &lt;code&gt;PATH&lt;/code&gt; variable without you knowing.&lt;/p&gt;
&lt;p&gt;Wait, you can actually modify your &lt;code&gt;PATH&lt;/code&gt; variable? Yep, and there's a few ways to do this.&lt;/p&gt;
&lt;h2 id=&quot;how-to-modify-the-path-variable&quot;&gt;How To Modify the &lt;code&gt;PATH&lt;/code&gt; variable&lt;/h2&gt;&lt;h3 id=&quot;using-a-bash-session&quot;&gt;Using a Bash Session&lt;/h3&gt;&lt;p&gt;The first way is transient, or temporary, and only occurs for your particular bash session. You can make a folder have higher priority than the existing paths by &quot;pre-pending&quot; it to the &lt;code&gt;PATH&lt;/code&gt; variable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ export PATH=/path/to/my/folder:$PATH
$ echo $PATH
/path/to/my/folder:/usr/bin:/bin:/usr/local/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or I can make it have a lower priority than existing paths by &quot;appending&quot; it to the &lt;code&gt;PATH&lt;/code&gt; variable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ export PATH=$PATH:/path/to/my/folder
$ echo $PATH
/usr/bin:/bin:/usr/local/bin:/path/to/my/folder
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reason this is temporary is because I only export it during my current bash session.&lt;/p&gt;
&lt;h3 id=&quot;bashrc-or-.bash_profile-file&quot;&gt;&lt;code&gt;bashrc&lt;/code&gt; or &lt;code&gt;.bash_profile&lt;/code&gt; File&lt;/h3&gt;&lt;p&gt;If I wanted to make my changes somewhat more permanent, then I would include inside my &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.bash_profile&lt;/code&gt; file. (I recommend using the &lt;code&gt;.bashrc&lt;/code&gt; file.) The &lt;code&gt;.bashrc&lt;/code&gt;/&lt;code&gt;.bash_profile&lt;/code&gt; file lives inside your home directory (your &lt;code&gt;$HOME&lt;/code&gt; environment variable specifies this), and is a file that your bash interpreter will execute first load. It will execute all of the commands inside there. This means, you can change your PATH variable by simply putting inside your &lt;code&gt;.bashrc&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...other stuff above...
# Make /path/to/folder have higher priority
export PATH=/path/to/folder:$PATH

# Make /path/to/other/folder have lower priority
export PATH=$PATH:/path/to/folder
...other stuff below...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;data-science-and-the-path-environment-variable&quot;&gt;Data Science and the &lt;code&gt;PATH&lt;/code&gt; environment variable&lt;/h2&gt;&lt;p&gt;Now, &lt;strong&gt;how is this relevant to data scientists?&lt;/strong&gt; Well, if you're a data scientist, chances are that you use Python, and that your Python interpreter comes from the Anaconda Python distribution (a seriously awesome thing, go get it!). What the Anaconda Python installer does is prioritize the &lt;code&gt;/path/to/anaconda/bin&lt;/code&gt; folder in the &lt;code&gt;PATH&lt;/code&gt; environment variable. You might have other Python interpreters installed on your system (that is, Apple ships its own). However, this &lt;code&gt;PATH&lt;/code&gt; modification ensures that each time you type &lt;code&gt;python&lt;/code&gt; into your Bash terminal, you execute the Python interpreter shipped with the Anaconda Python distribution. In my case, after installing the Anaconda Python distribution, my &lt;code&gt;PATH&lt;/code&gt; looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo $PATH
/Users/ericmjl/anaconda/bin:/usr/bin:/bin:/usr/local/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even better, what conda environments do is prepend the path to the conda environment binaries folder while the environment is activated. For example, with my blog, I keep it in an environment named &lt;code&gt;lektor&lt;/code&gt;. Thus...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo $PATH
/Users/ericmjl/anaconda/bin:/usr/bin:/bin:/usr/local/bin
$ which python
/Users/ericmjl/anaconda/bin/python
$ source activate lektor
$ echo $PATH
/Users/ericmjl/anaconda/envs/lektor/bin:/Users/ericmjl/anaconda/bin:/usr/bin:/bin:/usr/local/bin
$ which python
/Users/ericmjl/anaconda/envs/lektor/bin/python
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice how the bash terminal now preferentially picks the Python inside the higher-priority &lt;code&gt;lektor&lt;/code&gt; environment.&lt;/p&gt;
&lt;p&gt;If you've gotten to this point, then you'll hopefully realize there's a few important concepts listed here. Let's recap them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PATH&lt;/code&gt; is an environment variable stored as a plain text string used by the bash interpreter to figure out where to find executable programs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATH&lt;/code&gt; is colon-delimited; higher priority directories are to the left of the string, while lower priority directories are to the right of the string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PATH&lt;/code&gt; can be modified by prepending or appending directories to the environment variable. It can be done transiently inside a bash session by running the &lt;code&gt;export&lt;/code&gt; command at the command prompt, or it can be done permanently across bash sessions by adding an &lt;code&gt;export&lt;/code&gt; line inside your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.bash_profile&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;other-environment-variables-of-interest&quot;&gt;Other Environment Variables of Interest&lt;/h2&gt;&lt;p&gt;Now, what other environment variables might a data scientist encounter? These are a sampling of them that you might see, and might have to fix, especially in contexts where your system administrators are off on vacation (or taking too long to respond).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For general use&lt;/strong&gt;, you'll definitely want to know where your &lt;code&gt;HOME&lt;/code&gt; folder is -- on Linux systems, it's often &lt;code&gt;/home/username&lt;/code&gt;, while on macOS systems, it's often &lt;code&gt;/Users/username&lt;/code&gt;.  You can figure out what &lt;code&gt;HOME&lt;/code&gt; is by doing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo $HOME
/Users/ericmjl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;If you're a Python user&lt;/strong&gt;, then the &lt;code&gt;PYTHONPATH&lt;/code&gt; is one variable that might be useful. It is used by the Python interpreter, and specifies where to find Python modules/packages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you have to deal with C++ libraries&lt;/strong&gt;, then knowing your &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; environment variable is going to be very important. I'm not well-versed enough in this to espouse on it intelligently, so I would defer to &lt;a href=&quot;http://xahlee.info/UnixResource_dir/_/ldpath.html&quot;&gt;this website&lt;/a&gt; for more information on best practices for using the &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you're working with Spark&lt;/strong&gt;, then the &lt;code&gt;PYSPARK_PYTHON&lt;/code&gt; environment variable would be of interest. This essentially tells Spark which Python to use for both its driver and its workers; you can also set the &lt;code&gt;PYSPARK_DRIVER_PYTHON&lt;/code&gt; to be separate from the &lt;code&gt;PYSPARK_PYTHON&lt;/code&gt; environment variable, if needed.&lt;/p&gt;
&lt;h3 id=&quot;hack-your-environment-variables&quot;&gt;Hack Your Environment Variables&lt;/h3&gt;&lt;p&gt;This is where the most fun happens! Follow along for some stuff you might be able to do by hacking your environment variables.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hack #1: Enable access to PyPy.&lt;/strong&gt; I occasionally keep up with the development of PyPy, but because PyPy is not yet the default Python interpreter, and is not yet &lt;code&gt;conda install&lt;/code&gt;-able, I have to put it in its own &lt;code&gt;$HOME/pypy/bin&lt;/code&gt; directory. To enable access to the PyPy interpreter, I have to make sure that my &lt;code&gt;/path/to/pypy&lt;/code&gt; is present in the &lt;code&gt;PATH&lt;/code&gt; environment variable, but at a lower priority than my regular CPython interpreter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hack #2: Enable access to other language interpreters/compilers.&lt;/strong&gt; This is analogous to PyPy. I once was trying out Lua's JIT interpreter to use Torch for deep learning, and needed to add a path to there in my &lt;code&gt;.bashrc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hack #3: Install Python packages to your home directory.&lt;/strong&gt; On shared Linux compute systems that use the &lt;code&gt;modules&lt;/code&gt;  system rather than &lt;code&gt;conda&lt;/code&gt; environments, a &lt;code&gt;modulefile&lt;/code&gt; that you load might be configured with a virtual environment that &lt;em&gt;you don't have permissions to modify&lt;/em&gt;. If you need to install a Python package, you might want to &lt;code&gt;pip install --user my_pkg_name&lt;/code&gt;. This will install it to &lt;code&gt;$HOME/.local/lib/python-[version]/site-packages/&lt;/code&gt;. Ensuring that your &lt;code&gt;PYTHONPATH&lt;/code&gt; includes &lt;code&gt;$HOME/.local/lib/python-[version]/site-packages&lt;/code&gt; at a high enough priority is going to be important in this case.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hack 4: Debugging when things go wrong.&lt;/strong&gt; In case something throws an error, or you have unexpected behaviour -- something I encountered before was my Python interpreter not being found correctly after loading all of my Linux modules -- then a way to debug is to temporarily set your PATH environment variable to some sensible &quot;defaults&quot; and sourcing that, effectively &quot;resetting&quot; your PATH variable, so that you can manually prepend/append while debugging.&lt;/p&gt;
&lt;p&gt;To do this, place the following line inside a file named &lt;code&gt;.path_default&lt;/code&gt;, inside your home directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export PATH=&quot;&quot;  # resets PATH to an empty string.
export PATH=/usr/bin:/bin:/usr/local/bin:$PATH  # this is a sensible default; customize as needed.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After something goes wrong, you can reset your PATH environment variable by using the &quot;source&quot; command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ echo $PATH
/some/complicated/path:/more/complicated/paths:/really/complicated/paths
$ source ~/.path_default
$ echo $PATH
/usr/bin:/bin:/usr/local/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note - you can also execute the exact same commands inside your bash session; the interactivity may also be helpful.&lt;/p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;&lt;p&gt;I hope you enjoyed this article, and that it'll give you a, ahem, path forward whenever you encounter these environment variables!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/10/3/new-habits/">
    <title type="text">New Habits</title>
    <id>urn:uuid:b6183a04-fde9-32ea-8fad-fdefbc3bd4c1</id>
    <updated>2017-10-03T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/10/3/new-habits/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;Ever since &quot;going corporate&quot;, it's meant picking up more new productivity/coding habits. Here's a sampling of what I've learned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1) Living by my calendar&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Basically, the &quot;work calendar&quot; defines everything about the day. I've had to make sure that if I am not going to be pencilled in for a meeting, I have to block out time on the calendar first.&lt;/p&gt;
&lt;p&gt;Also, sending invites to people + rooms -- the latter being the newest habit I've had to pick up.&lt;/p&gt;
&lt;p&gt;Finally, setting informative titles for calendar events - if I want to have coffee or lunch with X, I can't just write &quot;Coffee with X&quot; - it literally shows up as &quot;Coffee with X&quot; on X's calendar, which is super awkward, as if they're having coffee with themselves! Something more informative, like, &quot;Eric &lt;&gt; X coffee&quot; really helps the other person, who might be super busy and thus only glances at their calendar once in a while.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2) Flagging emails and applying rules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Emails fly everywhere. It gets super overwhelming after a while.&lt;/p&gt;
&lt;p&gt;If there's stuff that needs to be followed-up on, it stays in my Inbox until it's done. It also gets flagged, which automatically creates a Todo on my task list. (If this sounds like Outlook - yes, it's Outlook. On macOS. With no &quot;email snoozing&quot; feature...)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(3) Hacking through legacy code and shared compute resources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Working on a compute cluster with a code base that's built for legacy versions of programming languages is super frustrating! Thankfully I know enough about the differences between Python 2 and Python 3 to hack my way through.&lt;/p&gt;
&lt;p&gt;Shared compute resources means using &lt;code&gt;modules&lt;/code&gt;, but not everybody sets up &lt;code&gt;modules&lt;/code&gt; with the same set of assumptions as others. Some create virtual environments inside a module, others append to &lt;code&gt;$PATH&lt;/code&gt;, and getting the right combinations in a modular way is really tricky. It means I have some really painful one-off &lt;code&gt;$PATH&lt;/code&gt; hacks to make stuff work. Documentation is paramount - without putting in docs, I'll never remember what I did...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(4) Adapting to others' coding styles&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Not everybody is a Python programmer, and not everybody is a Pythonic programmer. The usual Python idioms that I'm used to (whether functional or object-oriented) sometimes get thrown out in favour of some other style (globals, anybody?), and I have to adapt to figure out what's going on. Thankfully my colleagues are open to me modifying their code, as long as I can demonstrate that the new version works fine, and I've been working hard to bring in Pythonic code style.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(5) Performance reviews&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gotta start getting used to this. I had a taste of it while volunteering as part of Tang Hall's student leadership, but now it's for real.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/9/14/visualize-large-datasets-by-sampling/">
    <title type="text">Visualize Large Datasets by Sampling</title>
    <id>urn:uuid:cdb3d3cb-bfc1-32a6-80cf-a71b1ee56b14</id>
    <updated>2017-09-14T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/9/14/visualize-large-datasets-by-sampling/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;Just a little tip, putting it here for myself and others in case it helps.&lt;/p&gt;
&lt;p&gt;Sometimes, you need to visualize a large dataset, but it takes a ton of time to render it or compute the necessary transforms.&lt;/p&gt;
&lt;p&gt;If your samples are statistically sampled independently of one another (i.e. basically not timeseries), and the goals are to do some statistical visualizations, then it's basically valid to visualize a downsampled set of the dataset.&lt;/p&gt;
&lt;p&gt;I recently encountered this point at work. After running a clustering analysis, I wanted to see a pair plot of the distribution of features in each cluster. However, with cluster sizes ranging from 200-2 million, rendering times were unreasonably long (making things non-interactive) for the large sized clusters. I thus decided to downsample the large clusters to a maximum of 2,000 data points. Instantly, render times improved, and I could start interacting with my data again.&lt;/p&gt;
&lt;p&gt;Little things matter!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/9/11/nano-text-editor-hacks/">
    <title type="text">nano text editor hacks</title>
    <id>urn:uuid:6027e651-57d0-305a-a2d4-cf3162beaa87</id>
    <updated>2017-09-11T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/9/11/nano-text-editor-hacks/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;Much as I've embraced the &lt;a href=&quot;https://atom.io/&quot;&gt;Atom text editor&lt;/a&gt;, there are times when the GUI isn't accessible to us, and we are forced to use a Terminal-based text editor.&lt;/p&gt;
&lt;p&gt;Now, I'm not one of those crazy types who use emacs or vim - those are the real seasoned pros. (I still don't know how to exit vim, btw.) As such, my terminal editor of choice remains the venerable &lt;code&gt;nano&lt;/code&gt;. Here's some hacks that I recently figured out, to make text editing much easier in &lt;code&gt;nano&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1) Syntax highlighting&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is such a big one! Syntax highlighting seriously helps a ton. If you're on a Mac, make sure you install &lt;code&gt;homebrew&lt;/code&gt;'s version of &lt;code&gt;nano&lt;/code&gt; - you can look at my &lt;a href=&quot;https://github.com/ericmjl/dotfiles/blob/master/install.sh#L41&quot;&gt;dotfiles&lt;/a&gt; or run the command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ brew install nano
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, edit your &lt;code&gt;~/.nanorc&lt;/code&gt; file to look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;include /usr/local/share/nano/python.nanorc  # gives you Python syntax highlighting
include /usr/local/share/nano/sh.nanorc  # gives you bash shell syntax highlighting
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next time you use &lt;code&gt;nano&lt;/code&gt; (from your user account), syntax highlighting should be enabled!&lt;/p&gt;
&lt;p&gt;You can find a sample &lt;a href=&quot;https://github.com/ericmjl/dotfiles/blob/master/.nanorc-mac&quot;&gt;.nanorc&lt;/a&gt; file on my GitHub &lt;a href=&quot;https://github.com/ericmjl/dotfiles/&quot;&gt;dotfiles&lt;/a&gt; repository&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2) Keyboard Shortcuts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here's a laundry list of keyboard shortcuts I've muscle-memorized:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl-x&lt;/code&gt;: quits. There will be a prompt to save the file if it's been modified.&lt;ul&gt;
&lt;li&gt;I usually end up doing &lt;code&gt;Ctrl-x-y-Enter&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-v&lt;/code&gt; scrolls down a page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-y&lt;/code&gt; scrolls up a page&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-w&lt;/code&gt; searches the document for a term that you type in (think &quot;where&quot;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-k&lt;/code&gt; cuts the line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-u&lt;/code&gt; pastes a cut line&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-^&lt;/code&gt; (i.e. &lt;code&gt;Ctrl-Shift-6&lt;/code&gt; on macOS keyboards) starts a &quot;select&quot; cursor.&lt;ul&gt;
&lt;li&gt;You can use arrow keys to expand or shrink the selection, which can then be cut and pasted.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-c&lt;/code&gt; cancels any commands that are 'active'.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl-o&lt;/code&gt; activates the &quot;save file&quot; dialogue - lets you save your state without quitting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;(3) Persistence&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nano&lt;/code&gt;, being not as fancy as &lt;code&gt;vim&lt;/code&gt; or &lt;code&gt;emacs&lt;/code&gt;, means it doesn't have the concept of sessions. Doesn't matter - use &lt;a href=&quot;https://github.com/tmux/tmux/wiki&quot;&gt;&lt;code&gt;tmux&lt;/code&gt;&lt;/a&gt; to persist!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;All-in-all, the biggest one that aids in writing on a terminal editor is syntax highlighting. I wrote this blog post in &lt;code&gt;nano&lt;/code&gt;, and being able to visually see different parts of my text highlighted according to their meaning has made writing much easier.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/8/31/what-would-be-useful-for-aspiring-data-scientists-to-know/">
    <title type="text">What would be useful for aspiring data scientists to know?</title>
    <id>urn:uuid:7512a55f-c44f-3d25-b874-e1656a22e54d</id>
    <updated>2017-08-31T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/8/31/what-would-be-useful-for-aspiring-data-scientists-to-know/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;I originally titled this post, &quot;What you need to know to become a data scientist&quot;, but I backed off from having such an authoritative post title for I wanted to keep things opinionated without being pompous :).&lt;/p&gt;
&lt;p&gt;Data Science (DS) is a hot field, and I'm going to be starting my new role doing DS at Novartis in September. As an aside, what makes me most happy about this role is that I'm going to do DS in the context of the life sciences (one of the &quot;hard sciences&quot;)!&lt;/p&gt;
&lt;p&gt;Now that I have secured a role, some people have come to ask me questions about how I made the transition into DS and into the industry in general. I hope to provide answers to those questions in this blog post, and that you, the reader, find it useful.&lt;/p&gt;
&lt;p&gt;I will structure this blog post into two sections:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;What do I need to know and how do I go about it?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What do I need to do?&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ready? Here we go :)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;First off, let's talk about what I think you, an aspiring data scientist, needs to know, and how to go about learning it.&lt;/p&gt;
&lt;h3 id=&quot;topic-1:-statistical-learning&quot;&gt;Topic 1: Statistical Learning&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Statistical learning methods&lt;/strong&gt; are going to top the list. From the standpoint of &quot;topics to learn&quot;, there's a laundry list one can write - all of the ML methods in &lt;code&gt;scikit-learn&lt;/code&gt;, neural networks, statistical inference methods and more. It's also very tempting to go through that laundry list of terms, learn how they work underneath, and call it a day there. I think that's all good, but only if that material is learned while in the service of picking up the meta-skill of &lt;strong&gt;statistical thinking&lt;/strong&gt;. This includes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Thinking about data as being sampled from a generative model parameterized by probability distributions (my Bayesian fox tail is revealed!), &lt;/li&gt;
&lt;li&gt;Identifying biases in the data and figuring out how to use sampling methods to help correct those biases (e.g. bootstrap resampling, downsampling), and &lt;/li&gt;
&lt;li&gt;Figuring out when your data are garbage enough that you shouldn't proceed with inference and instead think about experimental design.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That meta-skill of statistical thinking can only come with practice. Some only need a few months, some need a few years. (I needed about a year's worth of self-directed study during graduate school to pick it up.) &lt;strong&gt;&lt;em&gt;Having a project that involves this is going to be key!&lt;/em&gt;&lt;/strong&gt; A good introduction to statistical thinking for data science can be found in a &lt;a href=&quot;https://www.youtube.com/watch?v=TGGGDpb04Yc&quot;&gt;SciPy 2015 talk by Chris Fonnesbeck&lt;/a&gt;, and working through the two-part computational statistics tutorial by him and Allen Downey (&lt;a href=&quot;https://www.youtube.com/watch?v=fMycLa1bsno&quot;&gt;Part 1&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=heFaYLKVZY4&quot;&gt;Part 2&lt;/a&gt;) helped me a ton.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recommendation &amp; Personal Story:&lt;/strong&gt; Nothing beats practice. This means finding ways to apply statistical learning methods to projects that you already work on, or else coming up with new projects to try. I did this in graduate school: my main thesis project was not a machine learning-based project. However, I found a great &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3794897/&quot;&gt;PLoS Computational Biology paper&lt;/a&gt; implementing Random Forests to identify viral hosts from protein sequence, and it was close enough in research topic that I spent two afternoons re-implementing it using &lt;code&gt;scikit-learn&lt;/code&gt;, and presenting it during our lab's Journal Club session. I then realized the same logic could be applied to predicting drug resistance from protein sequence, and re-implemented a few other HIV drug resistance papers before finally learning and applying a fancier deep learning-based method that had been developed at Harvard to the same problem.&lt;/p&gt;
&lt;h3 id=&quot;topic-2:-software-engineering&quot;&gt;Topic 2: Software Engineering&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Software engineering&lt;/strong&gt; (SE), to the best of my observation, is about three main things: (a) learning how to abstract and organize ideas in a way that is logical and humanly accessible, (b) writing good code that is well-tested and documented, and (c) being familiar with the ever-evolving ecosystem of packages. SE is important for a data scientist, because models that are making predictions often are put into production systems and used beyond just the DS themselves.&lt;/p&gt;
&lt;p&gt;Now, I don't think a data scientist has to be a seasoned software engineer, as most companies have SE teams that a data scientist can interface with. However, having some experience building a software product can be &lt;em&gt;very helpful&lt;/em&gt; for lubricating the interaction between DS and SE teams. Having a logical structure to your code, writing basic tests for it, and providing sufficiently detailed documentation, are all things that SE types will very much appreciate, and it'll make life much easier for them when coming to code deployment and helping with maintenance. (Aside: I strongly believe a DS should take primary responsibility for maintenance, and &lt;em&gt;not&lt;/em&gt; the SE team, and only rely on the SE team as a fallback, say, when people are sick or on vacation.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recommendation &amp; Personal Story:&lt;/strong&gt; Again, nothing beats practice here. Working on your own projects, whether work-related or not, will help you get a feel for these things. I learned my software engineering concepts from participating in open source contributions. The first was a contribution to &lt;code&gt;matplotlib&lt;/code&gt; documentation, where I first got to use Git (a version control system) and Travis CI (a continuous integration system). It was there that I also got my first taste of software testing. The next year, I quickly followed it up with a small contribution to &lt;code&gt;bokeh&lt;/code&gt;, and then decided at SciPy 2016 to build &lt;code&gt;nxviz&lt;/code&gt; for my Network Analysis Made Simple tutorials. &lt;code&gt;nxviz&lt;/code&gt; became my first independent software engineering project, and also my &quot;capstone&quot; project for that year of learning. All-in-all, getting practice was instrumental for my learning process.&lt;/p&gt;
&lt;h3 id=&quot;topic-3:-industry-specific-business-cases&quot;&gt;Topic 3: Industry-Specific Business Cases&lt;/h3&gt;&lt;p&gt;This is something I learned from my time at Insight, and is non-negotiable. Data Science does not exist in a vacuum; it is primarily in the service of solving business problems. At Insight, Fellows get exposure to business case problems from a variety of industries, thanks to the Program Directors' efforts in collecting feedback from Insight alumni who are already Data Scientists in the industry.&lt;/p&gt;
&lt;p&gt;I think business cases show up in interviews as a test of a candidate's &lt;strong&gt;imaginative capacity and/or experience&lt;/strong&gt;: can the candidate demonstrate (a) the creativity needed in solving tough business problems, and (b) the passion for solving those problems? Neither of these are easy to fake when confronted with a well-designed business case. In my case, it was tough for me to get excited about data science in an advertisement technology firm, and was promptly rejected right after an on-site business case.&lt;/p&gt;
&lt;p&gt;It's important to note that these business cases are very industry specific. Retail firms will have a distinct need from marketing firms, and both will be very distinct from healthcare and pharmaceutical companies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recommendation &amp; Personal Story:&lt;/strong&gt; For aspiring data scientists, I recommend prioritizing the general industry area that you're most interested in targeting. After that, start going to meet-ups and talking with people about the kinds of problems they're solving - for example, I started going to a &lt;a href=&quot;../../../../../blog/2017/8/31/what-would-be-useful-for-aspiring-data-scientists-to-know/#&quot;&gt;Quantitative Systems Pharmacology&lt;/a&gt; meet-up to learn more about quantitative problems in the pharma research industry; I also presented a talk &amp; poster at a conference organized by Applied BioMath, where I knew lots of pharma scientists would be present. I also started reading through scientific journals (while I still had access to them through the MIT Libraries), and did a lot of background reading on the kinds of problems being solved in drug discovery.&lt;/p&gt;
&lt;h3 id=&quot;topic-4:-cs-fundamentals&quot;&gt;Topic 4: CS Fundamentals&lt;/h3&gt;&lt;p&gt;CS fundamentals really means things like algorithms and data structures. I didn't do much to prepare for this. The industry I was targeting didn't have a strong CS legacy/tradition, unlike most other technology firms doing data science (think the Facebooks, Googles, and Amazons), which do. Thus, I think CS fundamentals are mostly important for cracking interviews, and while problems involving CS fundamentals certainly can show up at work, unless something changes, they probably won't occupy a central focus of data science roles for a long time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recommendation &amp; Personal Story:&lt;/strong&gt; As I don't really like &quot;studying to the test&quot;, I didn't bother with this - but that also meant I was rejected from tech firms that I did apply to (e.g. I didn't pass Google Brain's phone interview). Thus, if you're really interested in those firms, you'll probably have to spend a lot of time getting into the core data structures in computer science (not just Python). Insight provided a great environment for us Fellows to learn these topics; that said, it's easy to over-compensate and neglect the other topics. Prioritize accordingly - based on your field/industry of experience.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Now, let's talk about things you can start doing from now on that will snowball your credibility for entering into a role in data science. To be clear, these recommendations are made with a year-long time horizon in mind - these are not so much &quot;crack-the-interview&quot; tips as they are &quot;prepare yourself for the transition&quot; strategies.&lt;/p&gt;
&lt;h3 id=&quot;strategy-1:-create-novel-and-useful-material-and-share-it-freely&quot;&gt;Strategy 1: Create novel and useful material, and share it freely&lt;/h3&gt;&lt;p&gt;This is very important, as it builds a personal portfolio of projects that showcase your technical skill. A friend of mine, Will Wolf, did a self-directed &lt;a href=&quot;http://willwolf.io/2016/07/29/my-open-source-machine-learning-masters-in-casablanca-morocco/&quot;&gt;Open Source Masters&lt;/a&gt;, where he not only delved deeply into learning data science topics, but also set about &lt;a href=&quot;http://willwolf.io/&quot;&gt;writing blog posts&lt;/a&gt; that explained tough and difficult concepts for others to understand, and showcased data projects that he was hacking on while learning his stuff.&lt;/p&gt;
&lt;p&gt;Another friend of mine, Jon Charest, wrote a blog post doing a &lt;a href=&quot;http://jonchar.net/2016/05/20/exploring-metal-subgenres-with-python.html&quot;&gt;network analysis about metal bands&lt;/a&gt; and their shared genre labels - along the way producing a great Jupyter Notebook and network visualizations that yielded contributions to &lt;code&gt;nxviz&lt;/code&gt;! Starting with that project, he did a few more, and eventually landed a role as a data scientist at Mathworks.&lt;/p&gt;
&lt;p&gt;Apart from blog posts, giving technical talks is another great way to showcase your technical mastery. I had created the Network Analysis Made Simple tutorials, inspired by Allen Downey's X Made Simple series, as a way of solidifying my knowledge on graph theory and complex systems, and a very nice side product was recognition that I had capabilities in computation, resulting in more opportunities - my favourite being becoming a DataCamp instructor on Network Analysis!&lt;/p&gt;
&lt;p&gt;A key here is to create materials that are &lt;strong&gt;accessible&lt;/strong&gt;.  Academic conferences likely won't cut it for accessibility - they're often not recorded, and not published to the web, meaning people can't find it. On the other hand, blog posts are publicly accessible, as are PyCon/SciPy/JupyterCon/PyData videos. Another key is to produce &lt;strong&gt;novel&lt;/strong&gt; material - simple rehashes aren't enough; they have to bring value to someone else's. Your materials only count if people can find you and they expand someone's knowledge.&lt;/p&gt;
&lt;p&gt;A few other data scientists, I think, will concur very strongly with this point; Brandon Rorher has an &lt;a href=&quot;https://brohrer.github.io/imposter_syndrome.html&quot;&gt;excellent blog post&lt;/a&gt; on this.&lt;/p&gt;
&lt;h3 id=&quot;strategy-2:-talk-with-people-inside-and-adjacent-to-industries-that-you-re-interested-in.&quot;&gt;Strategy 2: Talk with people inside and adjacent to industries that you're interested in.&lt;/h3&gt;&lt;p&gt;The importance of learning from other people cannot be understated. If you're releasing novel and accessible material, then you'll find this one to be much easier, as your credibility w.r.t. technical mastery will already be there - you'll have opportunities to bring value to industry insiders, and you can take that opportunity to get inside information on the kinds of problems that are being solved there. That can really help you strategize the kinds of new material that you make, which feeds back into a positive cycle.&lt;/p&gt;
&lt;p&gt;Talking with people in adjacent industries and beyond is also very important. I think none put it better than Francois Chollet in his tweet:&lt;/p&gt;
&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;It&amp;#39;s better to be curious about many things beyond your field -- the more topics you&amp;#39;ve explored, the broader your inspiration in your field&lt;/p&gt;&amp;mdash; François Chollet (@fchollet) &lt;a href=&quot;https://twitter.com/fchollet/status/903103206812655621&quot;&gt;August 31, 2017&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;p&gt;The main thing here is to have a breadth of ideas to draw on for inspiration when solving your own problem at hand. I had a first-hand taste of it when trying to solve the drug resistance problem (see above) - which turned out to be my introduction into the deep learning world proper!&lt;/p&gt;
&lt;h3 id=&quot;strategy-3:-learn-python&quot;&gt;Strategy 3: Learn Python&lt;/h3&gt;&lt;p&gt;Yes, I put this as a strategy rather than as a topic, mainly because programming languages are kind of arbitrary, and as such are less about whether a language is superior to others and more about whether you can get stuff done with that language.&lt;/p&gt;
&lt;p&gt;I suggest Python only because I've tasted for myself the triumphant feeling of being able to do all of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;environment setup (&lt;code&gt;conda&lt;/code&gt;), &lt;/li&gt;
&lt;li&gt;data extraction and cleaning (&lt;code&gt;pandas&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;modelling (&lt;code&gt;scikit-learn&lt;/code&gt;, &lt;code&gt;PyMC3&lt;/code&gt;, &lt;code&gt;keras&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;visualization (&lt;code&gt;matplotlib&lt;/code&gt;, &lt;code&gt;bokeh&lt;/code&gt;, &lt;code&gt;searborn&lt;/code&gt;), &lt;/li&gt;
&lt;li&gt;deployment (&lt;code&gt;Flask&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in one language. That's right - one language! (Sprinkling in a bit of HTML/CSS/JS in deployment, and bash in environment setup, of course.)&lt;/p&gt;
&lt;p&gt;There's very few languages with the flexibility of Python, and having a team converse in one language simply reduces that little bit of friction that comes from reading another language. There's a ton of productivity gains to be had! It's not the fastest, it's not the most elegant, but over the years, it's adopted the right ideas and built a large community developers, as such many people have built on it and used it to solve all manners of problems they're facing - heck, I even found a package that converts between traditional and simplified Chinese!&lt;/p&gt;
&lt;p&gt;It takes time to learn the language well enough to write good code with it, and nothing beats learning Python apart from actually building a project with it - I hope this idea of &quot;building stuff&quot; is now something ingrained in you after reading this post!&lt;/p&gt;
&lt;h3 id=&quot;strategy-4:-find-a-community-of-people&quot;&gt;Strategy 4: Find a community of people&lt;/h3&gt;&lt;p&gt;When it comes to building a professional network and making friends, nothing beats going through a shared experience of thick &amp; thin together with other people. Data science, being a really new thing, is a growing community of people, and being plugged into the community is going to be important for learning new things.&lt;/p&gt;
&lt;p&gt;The Insight Summer 2017 class did this - we formed a closely-knit community of aspiring data scientists, cheered each other on, and coached each other on topics that were of interest. I know that this shared experience with other Insighters will give us a professional network that we can tap into in the future!&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h3&gt;&lt;p&gt;Alrighty, to conclude, here's the topics and strategies outlined above.&lt;/p&gt;
&lt;p&gt;Topics to learn:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Must-have:&lt;/strong&gt; Statistical learning &amp; statistical thinking&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Good-to-have:&lt;/strong&gt; Software engineering&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Good-to-have:&lt;/strong&gt; Business case knowledge&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dependency, Optional:&lt;/strong&gt; CS Fundamentals&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Strategies:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Proven:&lt;/strong&gt; Make novel and useful materials and freely release them - teaching materials &amp; projects!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Very Useful:&lt;/strong&gt; Learn from industry insiders.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Very Useful:&lt;/strong&gt; Learn Python.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don't Forget:&lt;/strong&gt; Build community.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All-in-all, I think it boils back down to the fundamentals of living in a society: it's still about &lt;strong&gt;creating real value for others&lt;/strong&gt;, and &lt;strong&gt;receiving commensurate recognition&lt;/strong&gt; (not always money, by the way) for what you've delivered. Tips and tricks can sometimes get us ahead by a bit, but the fundamentals matter the most.&lt;/p&gt;
&lt;p&gt;For aspiring data scientists, some parting words: build useful stuff, learn new things, demonstrate that you can deliver value using data analytics and work with others using the same tools, and good luck on your job hunt!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/8/24/reading-and-writing-docs-the-overlooked-programming-skill/">
    <title type="text">Reading &amp; Writing Docs: The Overlooked Programming Skill?</title>
    <id>urn:uuid:41b8966e-9391-31d1-b945-ace2eae23652</id>
    <updated>2017-08-24T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/8/24/reading-and-writing-docs-the-overlooked-programming-skill/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;I recently read a blog article by DataCamp's CTO (Dieter) on how to scale their projects and their engineering team - it's a &lt;a href=&quot;https://medium.com/datacamp/technical-vision-part-1-5f016c163340&quot;&gt;great read&lt;/a&gt;! In the article, Dieter states that the only way to scale an engineering team is to have well-written docs. I can see the benefits to doing it this way - we minimize the number of channels that any coder needs to use to find out information; the docs should be the place where the intent and technical detail of the code are simultaneously documented alongside usage examples.&lt;/p&gt;
&lt;p&gt;Thus, in the final weeks up to starting my new job at Novartis as a Data Scientist, I decided to make sure I have the practice of writing, reading and publishing docs as good as muscle memory. I can already envision cases where, while conducting and building analyses, I end up writing a bunch of generally-useful functions that should be documented as well. What I write may eventually need to be used by someone else, including my future self; keeping track of how exactly a function is intended to be used is going to be very useful.&lt;/p&gt;
&lt;p&gt;I think reading and writing docs is an overlooked skill in programming. It's probably because this isn't a test of &quot;creative capacity&quot; (i.e. can you build something new), which is the &quot;sexy&quot; thing. It's more a test of &quot;maintenance capacity&quot; - and this is given less value and importance in the coding world. But it's incredibly important - many basic problems can be solved by reading the docs... but also, so many problems can be avoided by writing really good docs! The onus is on both parties - package maintainers &lt;em&gt;and&lt;/em&gt; developers - to write &lt;em&gt;and&lt;/em&gt; read good docs.&lt;/p&gt;
&lt;p&gt;But writing good docs is a tough job! I absolutely agree with this. There are different styles through which developers read docs - some prefer examples, while others just want to see function definitions - and it's very difficult to cater to every style. I personally think starting off with the style one's most comfortable with, and then gradually accepting community contributions, is the right way to go.&lt;/p&gt;
&lt;p&gt;One package that I maintain, &lt;a href=&quot;http://github.com/ericmjl/nxviz&quot;&gt;&lt;code&gt;nxviz&lt;/code&gt;&lt;/a&gt;, used to not have any docs written apart from that single file in the README. Thanks to my friend &lt;a href=&quot;https://www.linkedin.com/in/rempic/&quot;&gt;Remi Picone&lt;/a&gt;, I was able to learn how to configure Sphinx to get my docs working through copying &lt;a href=&quot;https://github.com/rempic/Image-Features-Extraction&quot;&gt;his example repository&lt;/a&gt;. Through that, I configured Sphinx to build docs on my nxviz project - and finally got it going! You can find it on &lt;a href=&quot;http://nxviz.readthedocs.io/en/latest/&quot;&gt;RTFD&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Learning this was really fun - looking forward to putting up more docs!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/8/10/next-steps/">
    <title type="text">Next Steps</title>
    <id>urn:uuid:8a2d5f36-6b39-3dc6-b303-643463e52510</id>
    <updated>2017-08-10T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/8/10/next-steps/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;Signed and done! I will be joining the Novartis Institutes for Biomedical Research (NIBR) in September, as part of the Scientific Data Analysis (SDA) team under Novartis Informatics (NX).&lt;/p&gt;
&lt;p&gt;NIBR is the research arm of Novartis, and the SDA team is essentially a &quot;Data Special Ops&quot; team inside NIBR. The nature of the position involves both internal consulting and the development of new initiatives across teams.&lt;/p&gt;
&lt;p&gt;The nature of the role I'm being hired into is in statistical learning, which is a general direction I've been moving towards during my time in grad school. I picked up and implemented a number of useful and interesting deep learning algorithms back then, and over the past half a year, have finally gotten in underneath the hood of graph &amp; image convolutions, variational autoencoders and gaussian processes. It's really fun stuff, at its core, and to me, it's even more fun translating biological and chemical data problems into that language, and back.&lt;/p&gt;
&lt;p&gt;After a summer learning lots and networking with industry professionals and fellow Fellows at Insight, I'm ready for a bit more structure in my life. Looking forward to starting there!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/8/2/open-source-software/">
    <title type="text">Open Source Software</title>
    <id>urn:uuid:1fcbcd30-7e09-3f8b-b884-21f4d7eee71d</id>
    <updated>2017-08-02T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/8/2/open-source-software/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;Open source software is awesome, and I've just been thoroughly convinced of why.&lt;/p&gt;
&lt;p&gt;Today, I put in a &lt;a href=&quot;https://github.com/pymc-devs/pymc3/pull/2470&quot;&gt;PR&lt;/a&gt; to PyMC3. This was a bug fix related to the PyMC3 multinomial distribution's random variates generator, which uses &lt;code&gt;numpy&lt;/code&gt;'s multinomial under the hood, which arose from floating point precision errors.&lt;/p&gt;
&lt;p&gt;I first encountered this bug last week, when I started trying out the use of PyMC3 on my GPU tower. GPU stuff is tricky. One of the issues relates to floating point precision. I'm not well-versed enough on this to write intelligently about the underlying causes, but one thing I learned is that GPUs prefer 32-bit floating point precision (&lt;code&gt;float32&lt;/code&gt;), while modern CPUs can handle 64-bit (&lt;code&gt;float64&lt;/code&gt;). (I'm sure this will change in the future.) In the vast majority of &quot;large number&quot; computations, it's no big deal, but when we deal with small numbers (decimals in the thousandths range and smaller), addition errors can crop up.&lt;/p&gt;
&lt;p&gt;This was the exact problem I was facing. I had some numbers crunching on the GPU in &lt;code&gt;float32&lt;/code&gt; space. Then, I had to pass them back to &lt;code&gt;numpy&lt;/code&gt;'s multinomial, which implicitly converts everything to &lt;code&gt;float64&lt;/code&gt;. Because multinomial takes in a list of &lt;code&gt;p&lt;/code&gt;s (probabilities) that must sum to one, I was getting issues with my list of &lt;code&gt;p&lt;/code&gt;s summing to just infinitesimally (in computation land) greater than one. I dug around on-and-off for about a week to look for a solution, but none came. Instead, I had to rely on a small hack that I didn't like, adding a 1 millionth value to the sum and renormalizing probabilities... but that felt hacky and unprincipled.&lt;/p&gt;
&lt;p&gt;The fix was inspired by someone else's problems that was discussed on &lt;code&gt;numpy&lt;/code&gt;'s repository. The trick was to convert the numbers from &lt;code&gt;float32&lt;/code&gt; to &lt;code&gt;float64&lt;/code&gt; first and re-compute the probabilities in &lt;code&gt;float64&lt;/code&gt; precision. I implemented that locally, and everything worked! I quickly ran two of the most relevant tests in the test suite, and they both passed. So I pushed up to GitHub and submitted a PR on this (after checking in with the lead devs on their issue tracker) - and it was just merged tonight!&lt;/p&gt;
&lt;p&gt;If PyMC3's and &lt;code&gt;numpy&lt;/code&gt;'s code bases were not open source, with issues discussed openly, I would not have been able to figure out a possible fix to the issues with the help of other people. Also, I wouldn't have been able to patch the codebase locally first to see if it solved my own problems. I also wouldn't have access to the test suite to check that nothing was broken. All-in-all, working with an open source codebase was instrumental to getting this fix implemented.&lt;/p&gt;
&lt;p&gt;Big shout-out to the PyMC devs I interacted with on this - Colin &amp; Junpeng. Thank you for being so encouraging and helpful!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/7/22/bayesian-neural-networks/">
    <title type="text">Bayesian Neural Networks</title>
    <id>urn:uuid:cfb0959d-2897-34c1-8f49-bc2e71496aeb</id>
    <updated>2017-07-22T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/7/22/bayesian-neural-networks/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;During this week, while us Insight Fellows begin going out to interview with other companies, my &quot;side hustle&quot; has been working on my &lt;a href=&quot;https://github.com/ericmjl/bayesian-analysis-recipes&quot;&gt;Bayesian Analysis Recipes&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;Two particularly interesting problems I've wanted to write my own implementation for are multinomial classification and Bayesian deep learning. I finally got both of them done today, after about 2-3 days of hacking on them.&lt;/p&gt;
&lt;p&gt;Multinomial classification (&lt;a href=&quot;https://github.com/ericmjl/bayesian-analysis-recipes/blob/master/multiclass-logistic-regression-cover-type.ipynb&quot;&gt;notebook here&lt;/a&gt;) is the problem where we try to classify an item as being one of multiple classes. This is the natural extension to binary classification (done by logistic regression). To do this, I took the &lt;a href=&quot;https://archive.ics.uci.edu/ml/datasets/covertype&quot;&gt;forest cover dataset&lt;/a&gt; and used PyMC3 to implement multinomial logistic regression. Seeing how to do it with PyMC3 was the most important aspect of this; actual accuracy wasn't much of a concern for me.&lt;/p&gt;
&lt;p&gt;However, having seen the classification report (at the bottom of the notebook), and having read that the dataset was originally classified using neural networks, I immediately had the thought of doing a Bayesian neural network for multi-class classification, having seen it implemented for binary classification on the PyMC3 website.&lt;/p&gt;
&lt;p&gt;Bayesian neural networks are not hard to intuit - basically, we place priors on the weights, rather than learning point estimates. In doing so, we are able to propagate uncertainty forward to predictions. Speaking as a non-expert in the field, I think the tricky part is the sampling algorithms needed.&lt;/p&gt;
&lt;p&gt;One thing nice about the field of Bayesian deep learning is the use of variational inference to approximate the true distribution of predictions with a mathematically more tractable one (e.g. a Gaussian). In doing so, we gain a fast way towards approximately learning the uncertainty in predictions - essentially we trade a little bit of accuracy for a lot of speed. For complex models like neural nets, this can be very valuable, as the number of parameters to learn grows very, very quickly with model complexity, so anything fast can make iteration easier.&lt;/p&gt;
&lt;p&gt;Starting with the code &lt;a href=&quot;http://twiecki.github.io/blog/2016/06/01/bayesian-deep-learning/&quot;&gt;from Thomas Wiecki's website&lt;/a&gt;, I hacked together a few utility functions and boiled down the example to its essentials. Feed-forward neural nets aren't difficult to write - just a bunch of matrix ops and we're done. The &lt;a href=&quot;https://github.com/ericmjl/bayesian-analysis-recipes/blob/master/multiclass-classification-neural-network.ipynb&quot;&gt;notebook is available as well&lt;/a&gt;. One nice little feature is that by going with a deep neural network, we have additional predictive accuracy!&lt;/p&gt;
&lt;p&gt;Moving forward, I'd like to improve on that notebook a bit more, by somehow implementing/developing a visualization for multiclass classification &lt;strong&gt;uncertainty&lt;/strong&gt; which is the thing we gain from going Bayesian. Hopefully I'll be able to get to that next week - it's shaping up to look quite hectic!&lt;/p&gt;
&lt;p&gt;As a side note, I found a bug with the multinomial distribution implementation in PyMC3, and am working with one of the core developers to get it fixed in PyMC3's master branch. (Thanks a ton, Junpeng, if you ever get to read this! ) In the meantime, I simply took his patch, modified mine a little bit, and used the patched up PyMC3 for my own purposes.&lt;/p&gt;
&lt;p&gt;This is why I think open source is amazing - I can literally patch the source code to get it to do what I need correctly! Wherever I work next has to be supportive of things like this, and have to allow re-release of generally/broadly useful code that I touch - it is the right thing to do!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/7/17/lessons-learned-during-insight/">
    <title type="text">Lessons Learned During Insight</title>
    <id>urn:uuid:65144002-b35b-3954-9870-3db8518bed59</id>
    <updated>2017-07-17T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/7/17/lessons-learned-during-insight/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;(a) Solving healthcare goes beyond solving the science underlying it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At its core, healthcare delivery is essentially a human problem.  Even what we choose to optimize for is a hard problem. Do we optimize for changing human behaviour, or do we optimize for more precise treatments?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(b) Healthcare is complex&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The biggest thing preventing a &quot;solving of healthcare&quot; is misaligned incentives.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(c) I like scientific data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Regardless of the lesson that healthcare needs to be solved with more than science, I still found myself naturally much more engaged with companies that were dealing with scientific data as part of their data science problems. Teams that were dealing with other types of data: insurance claims, financial, marketing, platform product analytics, click streams... these were much less engaging. I know my best fit now, though I won’t rule out other teams.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(d) People can change the equation.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I met with some people whose intellect and grasp of knowledge I really admire! Additionally, passion is infectious. It helps to work with colleagues who energize one another, rather than drain each others’ energy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(e) Some Insight alumni are awesome&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And I want to be like them when I help with mentoring for the next batch. Perhaps if I get a chance to interview others, I’d like to be able to model how I interview after the alumni mentors.&lt;/p&gt;
&lt;p&gt;Biggest shout-out to George Leung, who works for Vectra, tailored his mentoring session by first asking me about my Insight project, which involved Gaussian processes and variational auto-encoders (VAEs). George asked me first about what VAEs were, and then asked me to solve a Bayes problem on the board. I could tell he was building his questions on-the-fly.&lt;/p&gt;
&lt;p&gt;The other shout-out goes to Ramsey Kamar, who went through the “Big 4” questions: tell me about yourself, what’s your previous accomplishments, how did you face a conflict, and what’s your biggest weakness. His feedback to me was direct, positive, and most importantly, always encouraging.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(f) Humanities tools are needed&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On reflection, I think that if we’re going to solve the “human” portion of healthcare, we’re going to need tools from the humanities - the tools that let us qualitatively and quantitatively study human behaviour. While data science can provide a quantitative path towards a solution, the qualitative side of it will remain as important as ever.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/7/15/insight-week-7/">
    <title type="text">Insight Week 7</title>
    <id>urn:uuid:f74e9ac8-4b90-3bf8-9f49-2df29a025f6b</id>
    <updated>2017-07-15T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/7/15/insight-week-7/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;Aaand with that, week 7 of Insight is done!&lt;/p&gt;
&lt;p&gt;I had a short week because of SciPy 2017, and I'm thankful that I got a chance to head out there - had the opportunity to reconnect with many friends from the SciPy community.&lt;/p&gt;
&lt;p&gt;The two days of Week 7 that I experienced were probably the weirdest week 7 any Fellow has experienced to date. Because I had missed a demo on account of SciPy, and because the company didn't want to just watch the pre-recorded demo video, I made a trek up to Cambridge to demo on-site. What initially was a 30 minute session turned out to be a 1.5 hr demo.&lt;/p&gt;
&lt;p&gt;I have two more demo obligations to fulfill next week. Other than that, it's going to be mostly interview preparation with other fellows, and more data and coding challenges, and more studying of topics that we're not familiar with. I am trying to brush up on SQL more, as I can see it being a useful tool to have to query data out of databases.&lt;/p&gt;
&lt;p&gt;Now that we're done with Week 7, we're going to be alumni soon. As such, I've began thinking about how I could give back as an alumni. Some ideas have come to mind, inspired by what others have done.&lt;/p&gt;
&lt;p&gt;Firstly, I think I can help standardize future Fellows' coding environments by providing a set of annotated instructions for installing the Anaconda distribution of Python. Perhaps even an evening workshop on the first Thursday might be useful.&lt;/p&gt;
&lt;p&gt;Secondly, I've come to recognize that the biggest bottleneck for Fellows' projects is the web deployment and design portion. Model training to obtain an MVP is fairly fast - one of &lt;code&gt;scikit-learn&lt;/code&gt;'s models is often good enough. However, most of us didn't know HTML and Bootstrap CSS, and the deadline makes it stressful enough to pick this up on-the-fly. (The stress is probably compounded by the fact that the web app/blog post is not the most intellectually interesting portion of the project.) Perhaps a workshop at the end of Week 2 or beginning of Week 3 might be good.&lt;/p&gt;
&lt;p&gt;Thirdly, I see this trend where a lot more projects are going to start using deep learning. I think putting a workshop together with, say, Jigar, might be a useful thing to have.&lt;/p&gt;
&lt;p&gt;Finally, my interview simulator questions have become famous for being a 'hybrid' between stats, ML and CS. It's very much in the same vein as what I got when I interviewed with Verily.&lt;/p&gt;
&lt;p&gt;Until we get hired, we are allowed (and one might even say, expected) to continue coming into the office to help each other prepare for upcoming interviews. We're all looking forward to getting hired and solving data problems!&lt;/p&gt;
&lt;p&gt;With this post, I think I'll end the regular blog post series here. Hope this post series was an informative insight into Insight! Next one I'll post is going to be a summary of lessons learned from my time as an Insight Health Data Fellow.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/7/12/scipy-2017/">
    <title type="text">SciPy 2017</title>
    <id>urn:uuid:4b2b2af9-0ddf-3552-bc94-c7e33fbadfe5</id>
    <updated>2017-07-12T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/7/12/scipy-2017/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;I just finished from SciPy 2017!  This was a fruitful conference, and I'm glad I managed to make it.&lt;/p&gt;
&lt;p&gt;Monday was the first day. I wanted to get a better feel for the Jupyter widgets ecosystem, and as such I sat in on the corresponding &lt;a href=&quot;https://scipy2017.scipy.org/ehome/220975/493418/&quot;&gt;tutorial&lt;/a&gt;. That happened to be the only tutorial I sat in live.&lt;/p&gt;
&lt;p&gt;Nonetheless, one nice thing about the tutorials is that they are live recorded, and so we can watch the ones we missed on our own time when back home. These are the ones I hope to catch, partly out of interest, partly from recommendations by other conference attendees who sat in them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Numba&lt;/li&gt;
&lt;li&gt;Holoviews&lt;/li&gt;
&lt;li&gt;Dask&lt;/li&gt;
&lt;li&gt;scikit-image&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Looking at the list, I kind of realize now how much of a Continuum Analytics fanboy I've become...&lt;/p&gt;
&lt;p&gt;On the second day, I delivered my own Network Analysis Made Simple. I collected some feedback right at the end of the tutorial, and it looked like they were overall very positive. Many liked the whiteboard illustrations that I added on. When delivering this at PyCon, I think it would benefit from having a whiteboard of sorts.&lt;/p&gt;
&lt;p&gt;The third day was the start of the conference talks. There's many, many great talks out there! I also had the opportunity to connect with new people over breakfast, lunch, coffee and dinner. I tried hosting &quot;office hours&quot;, like Matt Davis did last year, but I think I announced it a bit too late.&lt;/p&gt;
&lt;p&gt;All-in-all, I think it was great to attend SciPy 2017 this year. I'm happy to have not broken the chain of attendance. Looking forward to serving on next year's organizing committee again, and I hope to have a new tutorial in the works!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/7/8/insight-week-6/">
    <title type="text">Insight Week 6</title>
    <id>urn:uuid:f1f19fd6-3a2a-3c79-b089-632495a06614</id>
    <updated>2017-07-08T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/7/8/insight-week-6/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;We had a short week this week because of the long July 4th weekend (Happy Birthday, America!).&lt;/p&gt;
&lt;p&gt;Wednesday was my second demo day, this time at MGH. There were 8 of us demoing at MGH's Clinical DS team, and I really enjoyed the interaction with them. The team asked of me two technical questions about Flu Forecaster, both of which were analogous to other questions I had heard before. After the demo, we hung out with the team and chatted a bit about their latest projects.&lt;/p&gt;
&lt;p&gt;In the afternoon, I focused on doing the data challenge and leetcode exercises; in the evening, I (at the last minute) signed up for back-to-back behavioral and ML interview practice sessions. It was good to chat with the alumni helping with the sessions, as I learned much more about their thought process. In the future, I'll probably be called on to interview other people, and I will definitely draw on my experiences here.&lt;/p&gt;
&lt;p&gt;On Thursday we had more prep. I helped with mock interviewing by being an observer for Xi and an interviewer for Angela. The role-playing with Angela was an interesting one for me. I tried playing the role of a conversational but technically-competent interviewer. Also asked questions genuinely out of curiosity too. I think that combined with Angela's outgoing personality kept the conversation enjoyable for all three of our spectators.&lt;/p&gt;
&lt;p&gt;In the late afternoon, an NYC session alum came by and gave us a session on data challenges. The exercise he gave was quite neat - basically, given one categorical output column and a slew of other feature columns, train the best model that has the highest accuracy score. Oh, the twist? Do it in 25 minutes.&lt;/p&gt;
&lt;p&gt;The key point from this exercise was to have us get prepared for an on-site data challenge. The on-site data challenge mainly helps the hiring team check that we have the necessary coding chops to work with the team. It also lets them see how we perform under time constraints. The most important thing is to deliver a model with some form of results. Iterating fast is very important. Thus, it helps to push out fast one model that works.&lt;/p&gt;
&lt;p&gt;On Friday, we did another round of the interview simulator. I thought it was better run this time round. The mutual feedback from one another is very helpful. I was tasked with a stats question, which I melded into a hybrid stats + CS question, thus modelling what I had received when I was interviewed at Verily. FWIW, the question I asked was to define bootstrap resampling (sampling with replacement), implement it using the Python standard library, and discuss the scenarios where it becomes a useful thing.&lt;/p&gt;
&lt;p&gt;If tasked with a similar one for the next time, I will probably ask about writing a function to sample from a Bernoulli distribution using only the Python standard library. It's useful to know how to implement these statistical draws when it's not easy or impossible to use other libraries. (I had to do it when trying out the PyPy interpreter a few years back, and didn't want to mess with installing &lt;code&gt;numpy&lt;/code&gt; for PyPy.)&lt;/p&gt;
&lt;p&gt;I liked a few of the other questions asked as well - for example, the knapsack problem posed by Steve: Given a set of produce items, each with their own value and weight (in Kg), and a knapsack that can only carry a maximum weight of produce, find the set of produce that will maximize value at the market.&lt;/p&gt;
&lt;p&gt;That afternoon, we slowed things down a bit. Regardless of how much we benefit from them, the interview simulators nonetheless are tiring. But that's the key point - interviews are day-long, exhausting endeavours that test stamina and ability to switch between contexts (both technical and social). The simulator aims to simulate that.&lt;/p&gt;
&lt;p&gt;Looking forward to next week. For me it'll be a short one, because I'll be at SciPy 2017 to lead a Network Analysis tutorial. Also hoping to represent Insight well!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/7/1/insight-week-5/">
    <title type="text">Insight Week 5</title>
    <id>urn:uuid:1c3535fd-47ba-3bcf-a37c-79a0f2cc9e82</id>
    <updated>2017-07-01T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/7/1/insight-week-5/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;First off, Happy Canada Day!&lt;/p&gt;
&lt;p&gt;Week 5 is primarily focused on interview prep as a bunch of us go out for our demos.&lt;/p&gt;
&lt;p&gt;We kicked off Monday with an interview prep field day. The main areas of focus for us were CS fundamentals, machine learning, SQL, and behavioral interviewing. I found SQL to be my weakest point, and I'll definitely be focusing a lot of efforts on there. I had a chance to explain gradient descent and regularization using algebra - something I never thought I would do!&lt;/p&gt;
&lt;p&gt;On Tuesday, Fellows began going outside for demos. My first demo will be at Boston Health Economics this Thursday, followed by (in no particular order) MGH, Biogen, Merck, OM1, and Immuneering. Definitely looking forward to presenting Flu Forecaster to them!&lt;/p&gt;
&lt;p&gt;On the side, we also started thinking through computer science fundamentals problems, and doing data analytics challenges. CS fundamentals are what you think it would be, covering data structures and algorithms. I found myself to be particularly fond of recursion, and implemented a recursive algorithm for something that could be solved in linear time without recursion. It was good to see my biases, and to try my hand at implementing the same thing in fundamentally two different styles.&lt;/p&gt;
&lt;p&gt;In the evening, Nick (one of the fellows) gave us a run through on SQL. It was very useful to have his perspective, which was basically that most of the problems we will encounter involve some degree of nested searches, and that we have to work backwards from what we want. I also had a good perspective from my alumni mentor on how to approach describing my thesis to interviewers.&lt;/p&gt;
&lt;p&gt;On Wednesday, the interview prep continued with more coding challenges, demo trips, and fellow-led workshops. Together with Jeff and Jigar, we led a deep learning fundamentals workshop, in which we went through how deep learning works for feed forward neural networks and convolutions neural networks.&lt;/p&gt;
&lt;p&gt;Thursday came my first demo, which was at Boston Health Economics. Overall, I thought the demo session went well, and that Catherine, our host, kept engaged with the presentations. I very much appreciate her intellect. Additionally, I took the approach of &quot;free styling it&quot; (of course conditioned on having previously rehearsed it enough times), which resulted in a demo presentation that was overall smoother than what I had previously delivered&lt;/p&gt;
&lt;p&gt;Apart from that, we continued our interview prep. This involved more CS fundamentals for me, getting more practice with common algorithms, and finishing the coding exercises that Ivan gave us.&lt;/p&gt;
&lt;p&gt;On Friday, we did an interview simulator, in which we practiced interviewing one another. This gave me a better view into the thought process that an interviewer might be going through, particularly when conducting a technical interview. From prior experience interviewing, I remembered that my most pleasant interviews were with individuals who kept the atmosphere positive, encouraging, and provided hints along the way. Thus, I tried to conduct the mock interviews in the same way.&lt;/p&gt;
&lt;p&gt;In the afternoon, I gave a very short workshop on how to write Pythonic code, which covered &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/#introduction&quot;&gt;&lt;code&gt;PEP8&lt;/code&gt;&lt;/a&gt; (which is now check-able using &lt;a href=&quot;https://github.com/PyCQA/pycodestyle&quot;&gt;&lt;code&gt;pycodestyle&lt;/code&gt;&lt;/a&gt;). It was fun seeing everybody go, &quot;Whoa! Atom can do that?!&quot; and then promptly going ahead to clean up their code according to the &lt;code&gt;flake8&lt;/code&gt; linter's recommendations.&lt;/p&gt;
&lt;p&gt;Interspersed throughout the week, I made an effort to summarize my thesis work a bit more. I think I have a few ways/hooks to explain it to a 'recruiter without a technical background', a 'computer scientist without biology background', and a 'biologist without a computing background'. Making it concise with a good &quot;hook&quot; was the hardest part, but I think I have something good now.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/6/30/using-bokeh-in-fluforecaster/">
    <title type="text">Using Bokeh in FluForecaster</title>
    <id>urn:uuid:5947ebef-768b-3520-b99f-4464525e6c45</id>
    <updated>2017-06-30T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/6/30/using-bokeh-in-fluforecaster/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;Author: Eric J. Ma, Insight Health Data Science Fellow (Boston 2017b)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this blog post, I will show how Bokeh featured in my Insight project, FluForecaster.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Motivation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a Health Data Fellow at Insight, we spend about 3 weeks executing on a data project, which we demo at companies that are hiring. I built &lt;a href=&quot;https://fluforecaster.herokuapp.com/&quot;&gt;FluForecaster&lt;/a&gt;, which was a project aimed at forecasting influenza sequence evolution using deep learning.&lt;/p&gt;
&lt;p&gt;My choice of project was strategically aligned with my goals on a few levels. Firstly, I wanted to make sure my project showcased deep learning, as it's currently one of the hottest skills to have. Secondly, I had components of the code base written in separate Jupyter notebooks prior to Insight, meaning, I could execute on it quickly within the three weeks we had. Thirdly, I had intended to join Insight primarily with the goal of networking with the Insight community, and that basically meant 'being a blessing' to others on their journey too - if I could execute fast and well on my own stuff, then there'd be time to be a team player with other Fellows in the session, and help them get their projects across the finish line.&lt;/p&gt;
&lt;p&gt;Each of us had to demo a &quot;final product&quot;. Initially, I was thinking about a &quot;forecasting dashboard&quot;, but one of our program directors, Ivan, suggested that I include more background information. As such, I decided to make the dashboard an interactive blog post instead. Thus, with FluForecaster being a web-first project, I finally had a project in which I could use Bokeh as part of the front-end.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Applying Bokeh&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Bokeh was used mainly for displaying three data panels in the browser. Firstly, I wanted to show how flu vaccine efficacy rarely crossed the 60% threshold over the years. Secondly, I wanted to show a breakdown of the number of sequences collected per year (as used in my dataset). Thirdly, I wanted to show a visual display of influenza evolution.&lt;/p&gt;
&lt;p&gt;For yearly vaccine effectiveness, it was essentially a line and scatter chart, with the Y-axis constrained between 0 and 100%. I added a hover tooltip to enable my readers to see the exact value of vaccine effectiveness as measured by the US CDC.&lt;/p&gt;
&lt;p&gt;To show the number of sequences per year in the dataset, the same kind of chart was deployed.&lt;/p&gt;
&lt;p&gt;Bokeh magic became really evident later when I wanted to show sequence evolution in 3 dimensions. Because 3D charts are generally a poor choice for a flat screen, I opted to show pairs of dimensions at a time. A nice side-effect of this is that because my &lt;code&gt;ColumnDataSource&lt;/code&gt; was shared amongst each of the three pairs of coordinates, panning and selection was automatically linked for free.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage Pros and Cons&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Bokeh's API is very powerful, in that it supplies many plotting primitive objects (glyphs, particularly), and that makes it a big plus for users who are experienced with the library, who are creating complex interactive charts.&lt;/p&gt;
&lt;p&gt;Most of my fellow Fellows at Insight ended up using the &lt;code&gt;bokeh.plotting&lt;/code&gt; interface, and I did too. I think the &lt;code&gt;bokeh.plotting&lt;/code&gt; interface provides the best balance between ease-of-use and flexibility. If you take a look at the code &lt;a href=&quot;https://github.com/ericmjl/flu-sequence-predictor/blob/master/utils/webplots.py#L15&quot;&gt;here&lt;/a&gt;, you'll notice that there's often a bit of boilerplate that gets repeated with variation, such as in the configuration of custom hover tools. I think this is the tradeoff we make for configurability... or I might just be not writing code most efficiently. :)&lt;/p&gt;
&lt;p&gt;There were times where I was tempted to just use the &lt;code&gt;bkcharts&lt;/code&gt;' declarative interface instead. It's a lot more easy to use. However, I did have some time on hand, and wanted to get familiar with the &lt;code&gt;bokeh.plotting&lt;/code&gt; interface, because there's a possibility that I might want to make wrappers for other visualizations that can lend themselves to a declarative API.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Embedding Visualizations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I built my interactive blog post using a combination of Flask, hand-crafted HTML, Bootstrap CSS &amp; JS, and Bokeh - which took care of the bulk of visuals. I drew static figures using Illustrator.&lt;/p&gt;
&lt;p&gt;Embedding the necessary Bokeh components wasn't difficult. Very good documentation is available on the &lt;a href=&quot;http://bokeh.pydata.org/en/latest/docs/user_guide/embed.html&quot;&gt;Bokeh docs&lt;/a&gt;. The key insight that I had learned was that I could have the &lt;code&gt;components&lt;/code&gt; passed into my Flask app functions' &lt;code&gt;return&lt;/code&gt; statements, and embed them using Jinja2 templating syntax. An example can be found &lt;a href=&quot;https://github.com/ericmjl/flu-sequence-predictor/blob/master/templates/index.html#L81&quot;&gt;here&lt;/a&gt;. Basically, &lt;code&gt;components&lt;/code&gt; returns a &lt;code&gt;div&lt;/code&gt; and a &lt;code&gt;js&lt;/code&gt; object, which are essentially just strings. To embed them in the templates, we use the syntax &lt;code&gt;{{ div|safe }}&lt;/code&gt; and &lt;code&gt;{{ js|safe }}&lt;/code&gt;. That &lt;code&gt;|safe&lt;/code&gt; is very important: it tells the Jinja2 templating engine that it's safe to render those pieces of Javascript and HTML.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Through the project, I became a lot more familiar with the Bokeh plotting library. Now I feel a bit torn! I've contributed to both the Bokeh and &lt;code&gt;matplotlib&lt;/code&gt; projects, and I love them both! I've also come to deeply respect the lead developers of both projects, having interacted with them many times. If I were to make a comment on &quot;where to use what&quot; based on my experience, it'd probably still be the conservative view of &quot;&lt;code&gt;matplotlib&lt;/code&gt; for papers, &lt;code&gt;bokeh&lt;/code&gt; for the web&quot;... but I'm sure that will be outdated soon. Who knows how the Python plotting landscape will evolve - it's exciting times ahead, and at least for now, I'm happy for the experience driving a dataviz project with Bokeh!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/6/24/insight-week-4/">
    <title type="text">Insight Week 4</title>
    <id>urn:uuid:d45d85a8-c226-3cd4-ae89-5e9392e16346</id>
    <updated>2017-06-24T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/6/24/insight-week-4/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;Week 4 has been all about demos. Polishing our demos, picking companies that we want to demo at (and possibly interview at later on). Every morning, we practice our demos, 10 minutes per person, with the goal of keeping our demo to under 5 minutes to leave time for Q&amp;A. I've found that the act of rehearsing our demos makes it much easier to pick out where I need improvement. For example, I tended to have trouble with explaining the validation portion smoothly, even though I knew what I was doing there. A tool that seems useful, especially for short demos, is to write out exactly what I want to say, and that definitely helped.&lt;/p&gt;
&lt;p&gt;On the type of work that I'm interested in, here's some things I've become much clearer on.&lt;/p&gt;
&lt;p&gt;Firstly, the factors I'm considering for a company. The ideal combination is: a company that deeply values the hard sciences (in my case life sciences), and is solving very tough technical problems that requires growth in and mastery of deep technical topics, on a team that encourages experimentation, personal growth, and open source contributions on company time. We'd have to be at the innovation boundary of very powerful techniques. This is important for me, because I believe that 5-10 years down the road, I would have mastery over very foundational and broadly applicable tools with the appropriate experience applying them to real-world problems, which I could leverage to solve more cool and interesting problems. It's also a good defence against being pigeon-holed into a particular domains or tasks - autonomy in problem selection and definition is very important to me, so most of my choices aim to maximize that over money.&lt;/p&gt;
&lt;p&gt;Secondly, I've effectively ruled out companies that are dealing with non hard-science data, e.g. insurance claims, marketing &amp; advertising, finance, and business data. Having applied computation to the life sciences over grad school, and being trained in the life sciences for over 10 years, I'm not ready to give up that background knowledge to work on other problems. I also believe that investing in the hard sciences means investing in the next wave of real-world innovation, and I'd like to ride that wave.&lt;/p&gt;
&lt;p&gt;Thirdly, within the next 5 years, I see myself growing as a technical person, rather than a management person. People issues, particularly conflict resolution, make it difficult to focus on being a good craftsman, and I much more enjoy craftsmanship than management.&lt;/p&gt;
&lt;p&gt;Now, on the companies that have come by...&lt;/p&gt;
&lt;p&gt;Most are using open data science tools in their toolkit, and this mostly means Python and R, Spark and a few other big DB tools. Some are still using SAS (.................) and didn't show a trend towards open data science languages, and effectively ruled themselves out of contention. (Using legacy tools signals a lack of forward-thinking and a desire to favour the status quo over pushing boundaries.)&lt;/p&gt;
&lt;p&gt;Some have given us words of wisdom. One guy basically said that healthcare has messed up (he used stronger language) incentives. Another said that to solve healthcare we need to first solve human behaviour. All very interesting points that are well-taken on my side. A non-healthcare company told us that if we're not paying for a service, then we're the product.&lt;/p&gt;
&lt;p&gt;In our session, it was basically the pharma research arms that piqued my interest the most, aside from one hospital's internal startup team. The gap in interest between #4 and #5 (for me, at least) was really big, and the gap of interest from #5 to the rest was even larger.&lt;/p&gt;
&lt;p&gt;Anyways, week 5 begins soon, and we pivot over into interview prep. Looking forward to learning lots, particularly doing deep dives on my weak spots!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/6/17/insight-week-3/">
    <title type="text">Insight Week 3</title>
    <id>urn:uuid:e5fc9686-7fc3-3c47-a50e-b3d2eac8f6f6</id>
    <updated>2017-06-17T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/6/17/insight-week-3/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;This week was a week of polishing our final products and getting them in shape for our demos. Pushing a product to final production really involves a lot of nitty-gritty tweaking. In this blog post, I'll detail some of what I had to work on.&lt;/p&gt;
&lt;p&gt;My &lt;a href=&quot;https://fluforecaster.herokuapp.com&quot;&gt;final product&lt;/a&gt; a hybrid web dashboard + blog post. Behind the dashboard is a fairly complex set of computations, which currently are run through a Jupyter notebook. The front-end, therefore, only renders the predicted flu sequences returned from the Jupyter notebooks. As part of my forecasts, I want to show the uncertainty surrounding the predictions, and how they're associated with individual forecasted sequences. This requires computing a convex hull surrounding a point cloud, and plotting it. I spent about 3-4 hours on Tuesday figuring out the code to make this part of the visualization, which I consider integral to communicating the project.&lt;/p&gt;
&lt;p&gt;Another important thing is the user experience (UX) when interacting with my hybrid blog post + dashboard. Unlike this blog or one written in Medium (the blog of choice for Insight), I have interactive elements in the post, which meant I had to hand-craft the HTML for the page. In plotting the figures on the page, there are a set of functions in the backend that are run before the page is rendered. These compute the necessary JS for interactive web plots. They have to run fast enough, otherwise Heroku will timeout. Introducing code to plot the bounding boxes above slowed the loading time of the page beyond the 30 second limit Heroku imposed. As such, I had to carefully profile my code (mostly manually, with timing statements printed to console) to isolate the slow part, rewrite the implementation for speed, and re-deploy to Heroku. This took another good 3-4 hours, all to shave off dozens of seconds. The things we do with our lives!&lt;/p&gt;
&lt;p&gt;Throughout the week, a lot of other Fellows were getting their web demos set up. A lot of questions regarding Bokeh and Flask were flying around. Because of the discussion, I think I have a much better grasp over the programming model involved in making Bokeh work with Flask. Basically there's a bunch of plotting computation that is needed to get the JavaScript computer by Bokeh, and then through Jinja2 templating and HTML divs, we can put the final plot in the HTML canvas. A few more rounds of practice and I should be able to commit it to memory.&lt;/p&gt;
&lt;p&gt;The final part is in getting the presentation overall looking polished and understandable. This involves many tasks, from tweaking the text to making static figures and more. I have spent time with column layouts and configuring modals to get my page content looking overall fresh and yet also informative. Requires a lot of thought!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/6/10/insight-week-2/">
    <title type="text">Insight Week 2</title>
    <id>urn:uuid:f36e273b-a937-34da-b058-04e268d1e235</id>
    <updated>2017-06-10T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/6/10/insight-week-2/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;This week has been intense, mostly because I knew in advance that I'd be spending two days wearing a fancy hat, funky robe, and yellow sash. Because I was missing two days of Insight, I had to get my Minimum Viable Product (MVP) out by Wednesday - thankfully, I did!&lt;/p&gt;
&lt;p&gt;If you've followed my blog post series on Insight (this is the 2nd post), my project is forecasting influenza sequences. This week, I hacked out my MVP and deployed it to &lt;a href=&quot;https://fluforecaster.herokuapp.com/&quot;&gt;Heroku&lt;/a&gt; as a hybrid HTML report + dashboard. I also picked up and incorporated a few new things along the way.&lt;/p&gt;
&lt;p&gt;The first is the use of tooltips on my Bokeh plots. Bokeh is really powerful, and in some of the exploratory analyses, I desired having tooltips as a UI element to help a reader (who might need some introduction) understand the nature of the problem and the data involved.&lt;/p&gt;
&lt;p&gt;The second is further mastery of Bootstrap CSS &amp; JS. Now, Insight's Program Directors have told us clearly that we're not gunning to become front-end designers (and the likes). Keeping that in mind, I still think it's important to know at least one front-end framework well enough to produce pleasant-looking interactive tools or reports - knowing front-end elements potentiates us to communicate with front-end designers on final data products.&lt;/p&gt;
&lt;p&gt;For the MVP, I tried further experiments with the Grid layout and Modal JS. The key idea behind Grid layouts was easier to grasp - prioritize rows, then columns.&lt;/p&gt;
&lt;p&gt;With the Modal, stepping back for a moment, my goal was to display the science behind the project. However, it gets really technical. My audience is probably going to fall into one of two personas: the &quot;business person&quot; who just wants to see the final result and doesn't really care about the techniques, and the &quot;technical person&quot; who wants to dig deeper. I chose to use the Modal effect to satisfy both. The scientific methods are described at a high level on the main page, and the Modal element is used to show further information, graphics, and the likes.&lt;/p&gt;
&lt;p&gt;The third was deployment to Heroku itself! &lt;a href=&quot;https://www.davidbaumgold.com/&quot;&gt;David Baumgold&lt;/a&gt; first showed me how to use Heroku at PyCon 2016, but I could never wrap my head around it at first. I think I didn't understand how &quot;deployment&quot; worked. A year later, stuff that DB taught me came to fruition, as I hacked on deploying a minimal Flask app to Heroku with my younger brother. That gave me enough of the Heroku-specific concepts to hack together the necessary &lt;code&gt;requirements.txt&lt;/code&gt; and &lt;code&gt;Procfile&lt;/code&gt; files to deploy Flu Forecaster to the web.&lt;/p&gt;
&lt;p&gt;For next week, these are my plans:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solve the problem of &quot;average sequences per quarter&quot; being ~10 amino acids different from actual sequences. Two approaches I'm thinking of:&lt;ul&gt;
&lt;li&gt;Use GPflow to train a Sparse Variational GP regressor on my dataset. This should allow me to scale up the forecasts beyond 67 quarters and into 700+ weeks, which is a greater time resolution and thus will give me greater sequence resolution in forecasts.&lt;/li&gt;
&lt;li&gt;Try forecasting variance in addition to mean coordinates. This will give me a full probability distribution to sample from, which may allow me to stick with PyMC3 and quarterly forecasts.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Still not sure which of the above two approaches are the better one, so I'll be sure to give each a shot.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/6/10/walk-the-stage-2017-edition/">
    <title type="text">&quot;Walk the Stage&quot; 2017 Edition</title>
    <id>urn:uuid:5d633f67-a1d8-3757-8d46-cf8d58935ff7</id>
    <updated>2017-06-10T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/6/10/walk-the-stage-2017-edition/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;Finally put on a funny hat and an oversized robe, and topped it off with a yellow hood that only six of us received last Friday. Just six in the entire Institute this year - only six of us weirdos chose the SciDoc (ScD) degree! (I chose it because I like yellow over blue, and get to have a bit of fun confusing recruiters out there.) The day was too hot, and so I couldn't be bothered to dress up - who's going to see what I'm wearing underneath the robes anyways?!&lt;/p&gt;
&lt;p&gt;Anyways, overall a good feeling to be done. A little bittersweet because I'm leaving a time where I had a ton of fun learning new things, especially in my final two years of grad school, though I also think it's nice to have a change of environment and to have a new set of problems to solve.&lt;/p&gt;
&lt;p&gt;My hope is to continue being deeply engaged with the hard sciences, even outside of the academic ivory tower, just because it's a fun thing to do. Here's to hoping I can find a good match with a company out there.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/6/2/insight-week-1/">
    <title type="text">Insight Week 1</title>
    <id>urn:uuid:5b5da7d1-9c07-3403-af55-a496755da518</id>
    <updated>2017-06-02T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/6/2/insight-week-1/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;Insight's Week 1 is done! Here's some of my thoughts so far.&lt;/p&gt;
&lt;p&gt;Firstly, the Fellows at Insight is very fast at learning things. Everybody is either a PhD or MD, some have done post-doctoral work, and even fewer have become professors, but everybody is interested in doing data stuff, and are very fast at picking up new things. I think at the same time, we're also good at thinking strategically upon being given feedback; once an idea sounds infeasible, new ideas come out of the pivot or even switch.&lt;/p&gt;
&lt;p&gt;Secondly, I see now the importance of developing a great data product. I think of a data product in terms of the &lt;strong&gt;input data&lt;/strong&gt;, the &lt;strong&gt;transformation&lt;/strong&gt; applied to the data, and the &lt;strong&gt;insight&lt;/strong&gt; returned from the data. Think of it as a Python function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def data_product(data):
    insight = transformation(data)
    return insight
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most of the &quot;data products&quot; being developed are consumer-facing type projects that a user can interact with, but a small number of them, mine included, are &quot;dashboard-style&quot; products that can continually ingest continually updated data and return continually updated insights. Both are good ideas.&lt;/p&gt;
&lt;p&gt;Thirdly, I've become clear on the importance of first clearly defining the problem we want to solve, and then working backwards to define what we build, particularly for the &lt;strong&gt;m&lt;/strong&gt;inimum &lt;strong&gt;v&lt;/strong&gt;iable &lt;strong&gt;p&lt;/strong&gt;roduct (MVP). This way of thinking keeps us agile, and prevents us from being stuck in a rut.&lt;/p&gt;
&lt;p&gt;Fourthly, other fellows know lots of good stuff that I've been able to learn about. For example, in deep learning, there's been a few steps I wasn't sure about w.r.t. convolutional neural networks in autoencoders. One other fellow, a post-doc from UC Berkeley, gave me the master-class run-through on what happens at the vector/matrix level with convolutional neural networks.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Thus far, really nice. I've noticed we don't generally end up competing with one another, and the atmosphere is very collaborative. We're working with one another, talking with one another, building trust and the likes. I'm looking forward to the coming weeks!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/5/22/pycon-2017-highlights/">
    <title type="text">PyCon 2017 Highlights</title>
    <id>urn:uuid:fa889d0d-31b1-34c9-87ae-7481b1b435e1</id>
    <updated>2017-05-22T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/5/22/pycon-2017-highlights/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;Last post was about thoughts on past PyCons, having attended PyCon 2017. This post is on PyCon 2017's highlights for me.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1) Serving as part of the organizing committee.&lt;/strong&gt; I had the privilege of serving on the FinAid committee this year, and spent a large fraction of time in the staff room preparing to disburse FinAid cheques. I have very vivid memories of how slow the line was when I was receiving my cheques back in the day, and so I wanted to make sure FinAid recipients could receive their reimbursements as fast as possible, without wasting time in line (when they could instead be listening on talks).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2) Teaching two tutorials.&lt;/strong&gt; This year, I submitted two tutorial proposals, and both were accepted. In the three years that I've been teaching it, &lt;a href=&quot;https://www.youtube.com/watch?v=E4VKzFmByhE&quot;&gt;Network Analysis Made Simple&lt;/a&gt; has always been popular, and I think it's because it gives participants a different way of thinking about data, thus making it an intellectually stimulating topic. I also developed a new material on &lt;a href=&quot;https://www.youtube.com/watch?v=yACtdj1_IxE&quot;&gt;Best Testing Practices for Data Science&lt;/a&gt;. This one, in retrospect, was much fresher, and thus in need of more battle-testing and polish compared to Network Analysis. I have some ideas, including modifications to the workshop format, narrowing the target audience and more, to make it more useful for future iterations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(3) First talk at PyCon!&lt;/strong&gt; I also gave a talk at PyCon on doing &lt;a href=&quot;https://www.youtube.com/watch?v=p1IB4zWq9C8&quot;&gt;Bayesian Statistical Analysis with PyMC3&lt;/a&gt;! This was my first PyCon talk ever. It was so nice to have a tweet-commendation by PyMC3's creator Chris Fonnesbeck too:&lt;/p&gt;
&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;. &lt;a href=&quot;https://twitter.com/ericmjl&quot;&gt;@ericmjl&lt;/a&gt; is giving the &lt;a href=&quot;https://twitter.com/hashtag/PyMC3?src=hash&quot;&gt;#PyMC3&lt;/a&gt; talk you really want to hear if you want to learn how to put it to practical use. Room 251. &lt;a href=&quot;https://twitter.com/hashtag/PyCon2017?src=hash&quot;&gt;#PyCon2017&lt;/a&gt;&lt;/p&gt;&amp;mdash; Chris Fonnesbeck (@fonnesbeck) &lt;a href=&quot;https://twitter.com/fonnesbeck/status/866404594951139328&quot;&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;p&gt;It was also nice to have Thomas Wiecki's tweet-commendation too:&lt;/p&gt;
&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Excellent &lt;a href=&quot;https://twitter.com/hashtag/PyMC3?src=hash&quot;&gt;#PyMC3&lt;/a&gt; talks at &lt;a href=&quot;https://twitter.com/hashtag/PyCon2017?src=hash&quot;&gt;#PyCon2017&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/fonnesbeck&quot;&gt;@fonnesbeck&lt;/a&gt;: &lt;a href=&quot;https://t.co/iFbxjSz9C1&quot;&gt;https://t.co/iFbxjSz9C1&lt;/a&gt; &lt;a href=&quot;https://t.co/VhAJLpVQBR&quot;&gt;https://t.co/VhAJLpVQBR&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/ericmjl&quot;&gt;@ericmjl&lt;/a&gt;: &lt;a href=&quot;https://t.co/MnkyWRivXs&quot;&gt;https://t.co/MnkyWRivXs&lt;/a&gt;&lt;/p&gt;&amp;mdash; Thomas Wiecki (@twiecki) &lt;a href=&quot;https://twitter.com/twiecki/status/866639588995063808&quot;&gt;May 22, 2017&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;p&gt;Beyond that, the attendees seemed to like the talk too on the Twitterverse!&lt;/p&gt;
&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Great introduction to Bayesian data analysis with PyMC3 by &lt;a href=&quot;https://twitter.com/ericmjl&quot;&gt;@ericmjl&lt;/a&gt; at &lt;a href=&quot;https://twitter.com/hashtag/PyCon2017?src=hash&quot;&gt;#PyCon2017&lt;/a&gt; &lt;a href=&quot;https://t.co/BjbR0tZ6AO&quot;&gt;https://t.co/BjbR0tZ6AO&lt;/a&gt;&lt;/p&gt;&amp;mdash; Matteo Visconti dOC (@MatteoVdOC) &lt;a href=&quot;https://twitter.com/MatteoVdOC/status/866413241907400704&quot;&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Awesome talk on Bayesian analysis by &lt;a href=&quot;https://twitter.com/ericmjl&quot;&gt;@ericmjl&lt;/a&gt;! Check out the material here: &lt;a href=&quot;https://t.co/HAPVYjKUhM&quot;&gt;https://t.co/HAPVYjKUhM&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sarah Guido (@sarah_guido) &lt;a href=&quot;https://twitter.com/sarah_guido/status/866413261037555713&quot;&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;An excellent concrete introduction to Bayesian stats. I&amp;#39;m really looking forward to working through the notebooks as well. &lt;a href=&quot;https://twitter.com/hashtag/PyCon2017?src=hash&quot;&gt;#PyCon2017&lt;/a&gt; &lt;a href=&quot;https://t.co/ec230Ui3iC&quot;&gt;https://t.co/ec230Ui3iC&lt;/a&gt;&lt;/p&gt;&amp;mdash; Leland McInnes (@leland_mcinnes) &lt;a href=&quot;https://twitter.com/leland_mcinnes/status/866437998253981696&quot;&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Problems, code and explanation - nice! &lt;a href=&quot;https://t.co/ulJEXfMAo0&quot;&gt;https://t.co/ulJEXfMAo0&lt;/a&gt;&lt;/p&gt;&amp;mdash; AV Speech Processing (@AV_SP) &lt;a href=&quot;https://twitter.com/AV_SP/status/866422943361794049&quot;&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Great summary slide &lt;a href=&quot;https://twitter.com/ericmjl&quot;&gt;@ericmjl&lt;/a&gt;! &lt;a href=&quot;https://t.co/JbFV4qrzCl&quot;&gt;pic.twitter.com/JbFV4qrzCl&lt;/a&gt;&lt;/p&gt;&amp;mdash; William Farmer (@willzfarmer) &lt;a href=&quot;https://twitter.com/willzfarmer/status/866415332264562688&quot;&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Last technical talk of &lt;a href=&quot;https://twitter.com/hashtag/PyCon2017?src=hash&quot;&gt;#PyCon2017&lt;/a&gt; and my brain is full. Excellent introduction to &lt;a href=&quot;https://twitter.com/hashtag/PyMc3?src=hash&quot;&gt;#PyMc3&lt;/a&gt; and Bayesian variable inference by &lt;a href=&quot;https://twitter.com/ericmjl&quot;&gt;@ericmjl&lt;/a&gt;&lt;/p&gt;&amp;mdash; Justin Gosses (@JustinGosses) &lt;a href=&quot;https://twitter.com/JustinGosses/status/866413619315056641&quot;&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Great talk from &lt;a href=&quot;https://twitter.com/ericmjl&quot;&gt;@ericmjl&lt;/a&gt; on PyMC3 making everything clear with concrete examples. &lt;a href=&quot;https://twitter.com/hashtag/pycon2017?src=hash&quot;&gt;#pycon2017&lt;/a&gt;&lt;/p&gt;&amp;mdash; Leland McInnes (@leland_mcinnes) &lt;a href=&quot;https://twitter.com/leland_mcinnes/status/866413119676891137&quot;&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;.&lt;a href=&quot;https://twitter.com/ericmjl&quot;&gt;@ericmjl&lt;/a&gt; giving &lt;a href=&quot;https://twitter.com/hashtag/bayesian?src=hash&quot;&gt;#bayesian&lt;/a&gt; intuition at &lt;a href=&quot;https://twitter.com/hashtag/PyCon2017?src=hash&quot;&gt;#PyCon2017&lt;/a&gt; ; as always, a great, inspiring speaker &lt;a href=&quot;https://t.co/4qz9QeTArc&quot;&gt;https://t.co/4qz9QeTArc&lt;/a&gt;&lt;/p&gt;&amp;mdash; Hugo Bowne-Anderson (@hugobowne) &lt;a href=&quot;https://twitter.com/hugobowne/status/866407227518734337&quot;&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Foregoing formula, &lt;a href=&quot;https://twitter.com/ericmjl&quot;&gt;@ericmjl&lt;/a&gt; wants you to walk away w/intuition about Bayesian stats: &amp;quot;update beliefs having seen the evidence&amp;quot; &lt;a href=&quot;https://twitter.com/hashtag/pycon2017?src=hash&quot;&gt;#pycon2017&lt;/a&gt;&lt;/p&gt;&amp;mdash; Melissa @ #pycon2017 (@iff_or) &lt;a href=&quot;https://twitter.com/iff_or/status/866407192110350336&quot;&gt;May 21, 2017&lt;/a&gt;&lt;/blockquote&gt;&lt;/p&gt;
&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;p&gt;It's very heartening to see how many people want to move into Bayes-land! The talk also happened to be the last in the session and last of the day, so I think many people were tired by that point and wanted to go to the final keynote. Thus, the only question came from my friend Hugo, with whom I also worked on a course at DataCamp, who asked about &quot;how we might communicate these ideas to, say, a manager.&quot; My thoughts on that were to report not a single number (e.g. the mean), but also the range, and communicate how the lower and upper bound of the range would affect bottomline decisions, or open up new opportunities (though I probably could have expressed this sentiment better).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(4) Feeding Guido van Rossum.&lt;/strong&gt; Python's BDFL, &lt;a href=&quot;https://en.wikipedia.org/wiki/Guido_van_Rossum&quot;&gt;Guido van Rossum&lt;/a&gt;, wandered into the staff office asking to see whether the speaker ready room was open, because he was hungry and was looking for some snacks. We initially suggested the main conference hall, but later I ran out and called him back, because we had some English biscuits in the staff room, and we engaged in a short chat. That's when I had my star-awed moment! Was tempted to get a photo, but I figured he'd probably be fed up with people asking for photo ops, so I decided against it, hoping to be considerate for him. When he finished the biscuit, he said goodbye, and left the staff office. Amazing how everybody else just went about their own business while he was in the room; speaks to the lack of ego that PyCon celebrities have, and that sets a great example for the rest of the community!&lt;/p&gt;
&lt;p&gt;Once I'm back in Boston, I'm definitely going to catch up on the rest of PyCon. I heard that there were a lot of good talks that I missed while staffing the conference as FinAid co-chair, will have to make sure that YouTube playlist is set up!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/5/21/post-pycon-2017-thoughts/">
    <title type="text">Post-PyCon 2017 Thoughts</title>
    <id>urn:uuid:b9261a98-97bb-32e2-8124-8ea3cc1fefa7</id>
    <updated>2017-05-21T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/5/21/post-pycon-2017-thoughts/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;This year's PyCon 2017 is over! Well, for me at least, as I head back to Boston, a place I've had to call home for the past 6 years.&lt;/p&gt;
&lt;p&gt;I've noticed my Portland PyCons have felt different from my Montreal PyCons.&lt;/p&gt;
&lt;p&gt;In Montreal, I felt more like a taker, a newcomer, a beginner. In Portland, I felt more like someone who could finally give back to the community. If anything, I hope I've been able to encourage others to also give back to the community.&lt;/p&gt;
&lt;p&gt;In Montreal, with respect to the community, I felt like I had to slowly navigate a new landscape of networks with people. There, I met a bunch of people who first became my PyCon community mentors: Stuart Williams and Reuben Orduz, whose years of experience in the community and in life are way beyond mine, became long-distance friends with whom I would look forward to meeting with again at the next PyCon. Carol Willing, a fellow MIT alum whom I met at a SciPy conference, also likewise became a community mentor for me. They didn't have to do much: words of encouragement, encouraging us to contribute back while themselves leading the charge, and connecting people together.&lt;/p&gt;
&lt;p&gt;These two years in Portland, I've instead started to get involved with the internal organization of PyCon, volunteering a bit of my time on the Financial Aid committee. That's where I got to meet even more people in the community, and in person too! LVH and Ewa, a husband-and-wife team who have made many community contributions. Karan Goel, a software engineer at Google who led FinAid this year and whom I shadowed for taking on next year's FinAid chair role (I think we'll just share the duties again like this year). Kurt, PSF's treasurer who's been doing this for decades, and even at his age, still loves programming, and who loves black decaf coffee. Brandon Rhodes, who is a Python community celebrity for his eccentricity and entertaining talks, who gave me many words of encouragement as I rehearsed my PyCon talk. Ned Jackson Lovely, for whom no words other than &quot;positive energy radiating through everything he does&quot; can best describe him.&lt;/p&gt;
&lt;p&gt;I think the PyCon community has done the &quot;community building&quot; portion of coding really well, and I'm thankful to be able to be part of this community of people. At the end of the day, good code is about bringing a benefit to people. So at the end of the day, while programming is an act of making routine things efficient, it's ultimately still about people, not code in and of itself. Thank you, PyCon community, it's been really fun being a part of the community this far, and I'm looking forward to many more years too!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/5/15/thesis-defence-video/">
    <title type="text">Thesis Defence Video!</title>
    <id>urn:uuid:02fdb33e-142a-348e-bb0d-0ffb59e58369</id>
    <updated>2017-05-15T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/5/15/thesis-defence-video/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;About two weeks after being done, my thesis defence video is up on YouTube! It can be found here: &lt;a href=&quot;https://youtu.be/ePqhQusK-3Q?t=1m23s&quot;&gt;https://youtu.be/ePqhQusK-3Q?t=1m23s&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My favourite parts are recollecting the thought of being scooped by someone else 4 years ago, saying that some people like doing sampling, and stating how the lessons from my first committee meeting have been passed on. Ahh, so many good memories!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/5/13/why-i-teach-coding-tutorials/">
    <title type="text">Why I Teach Coding Tutorials</title>
    <id>urn:uuid:01cd6084-2784-3ca8-9d1b-544c11804846</id>
    <updated>2017-05-13T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/5/13/why-i-teach-coding-tutorials/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;I'm very excited to be at PyCon! It's a bit of a personal challenge this year, as I'll be leading two tutorials, one on Network Analysis and one on Data Testing.&lt;/p&gt;
&lt;p&gt;With a bit of time on hand, I've done a bit of introspection as to why I love doing these tutorials. I think I can boil it down to a few broad themes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reason 1: Learning.&lt;/strong&gt; When it comes to learning material, nothing beats having to teach it to someone else. This means I have to master the material in order to teach it responsibly to someone else.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reason 2: Reputation.&lt;/strong&gt; Grounded on the foundation of having mastered the material I'm going to teach, getting out there helps me build a reputation for having both technical mastery and the ability to communicate the material out.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reason 3: Networking.&lt;/strong&gt; By going to conferences where my tutorials are accepted, it's a great way to meet people and learn about the latest and greatest out there.&lt;/p&gt;
&lt;p&gt;My hope is wherever I end up working, I can continue this craftsmanship!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/5/4/pycon-2017-tutorials-and-talks-preview/">
    <title type="text">PyCon 2017: Tutorials and Talk Preview!</title>
    <id>urn:uuid:ac865ab7-55a1-3728-b8ce-da75a3e72949</id>
    <updated>2017-05-04T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/5/4/pycon-2017-tutorials-and-talks-preview/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;This year, I'll be at PyCon 2017 presenting two tutorials and one talk! I'm very excited to be attending!&lt;/p&gt;
&lt;p&gt;The first tutorial I will deliver is on network analysis. The GitHub repository is &lt;a href=&quot;https://github.com/ericmjl/Network-Analysis-Made-Simple&quot;&gt;online&lt;/a&gt;, and is the most mature of the three. This will be my 3rd year teaching the tutorial; I first developed the material in 2015, and have been refining it ever since. This year, I have great help from Mridul Seth, a student from India who has also been doing network analysis.&lt;/p&gt;
&lt;p&gt;The second tutorial I will be leading is on testing practices for data science. The GitHub repository is &lt;a href=&quot;https://github.com/ericmjl/data-testing-tutorial&quot;&gt;online&lt;/a&gt;, and will cover the use of automated tests for checking code and data integrity, as well as the use of visualization methods in EDA to sanity-check the data. The material is still in development right now, and I'm hoping to get good feedback from the Boston Python community when I dry-run it locally in the Boston area.&lt;/p&gt;
&lt;p&gt;My talk will be on Bayesian statistical analysis using PyMC3. As usual, the materials are available online on &lt;a href=&quot;https://github.com/ericmjl/bayesian-stats-talk&quot;&gt;GitHub&lt;/a&gt;. In it, I will cover the two most common types of statistical analysis problems - parameter estimation and comparison of treatment with controls, and demonstrate the process of reasoning through model building, implementing it in PyMC3, and interpreting the data.&lt;/p&gt;
&lt;p&gt;Really excited to be making three contributions back to the Python community. I've benefited much from the use of Python tools, and every PyCon I learn something new, so this is my little way of giving back!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/5/3/managing-conda-environments/">
    <title type="text">Managing conda environments</title>
    <id>urn:uuid:11bd7015-0c5f-3315-baba-568c31f1d9fa</id>
    <updated>2017-05-03T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/5/3/managing-conda-environments/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;I recently got around to hacking a system for managing my &lt;code&gt;conda&lt;/code&gt; environments better. Previously, my coding projects mostly relied on one master environment (with exceptions, e.g. &lt;code&gt;bokeh&lt;/code&gt; development, or my Network Analysis Made Simple tutorial), but conflicts started cropping up. Thus, I decided to separate out my environments. However, keeping track of which environments go with which projects began getting tedious.&lt;/p&gt;
&lt;p&gt;I thus decided to automate some of the steps involved in maintaining environments, and keep everything centrally managed so my brain doesn't overload. It involves a bit of GitHub and a bit of bash scripting, but altogether gives a ton of flexibility and control over keeping my environments updated.&lt;/p&gt;
&lt;p&gt;I start by keeping a central repository of &lt;code&gt;conda&lt;/code&gt; environment YAML specifications. Mine is kept &lt;a href=&quot;https://github.com/ericmjl/conda-envs&quot;&gt;here&lt;/a&gt;. Each YAML specification includes just the minimum set of packages that I need; &lt;code&gt;conda&lt;/code&gt; manages the dependencies.&lt;/p&gt;
&lt;p&gt;For example, my environment specification for Bayesian statistical analyses looks as such:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;bayesian&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# for Bayesian analysis&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;channels&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;!!python/tuple&lt;/span&gt;
&lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;conda-forge&lt;/span&gt;
&lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;defaults&lt;/span&gt;
&lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;ericmjl&lt;/span&gt;
&lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;p p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;python=3.6&lt;/span&gt;
&lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;matplotlib&lt;/span&gt;
&lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;numpy&lt;/span&gt;
&lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;pandas&lt;/span&gt;
&lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;scipy&lt;/span&gt;
&lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;seaborn&lt;/span&gt;
&lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;pymc3&lt;/span&gt;
&lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;jupyter&lt;/span&gt;
&lt;span class=&quot;p p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l l-Scalar l-Scalar-Plain&quot;&gt;jupyterlab&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, I've not pinned specific versions here, because I like to keep up with the latest stable releases. However, if version pinning is desired, it's totally possible to pin specific packages to particular versions, using the same syntax as I did for &lt;code&gt;python=3.6&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In each project repository, I have an &lt;code&gt;update_env.sh&lt;/code&gt; script, that looks something like this:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://raw.githubusercontent.com/ericmjl/conda-envs/master/lektor.yml -O environment.yml
conda env update -f environment.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The key idea here is that I download only the relevant YAML file, export it as a generic &lt;code&gt;environment.yml&lt;/code&gt; file, and then run the &lt;code&gt;conda env update&lt;/code&gt; command on it to keep the environment up-to-date.&lt;/p&gt;
&lt;p&gt;Now, here's the magic. I hacked Christine Doig's &lt;code&gt;conda-auto-env&lt;/code&gt; script  to execute &lt;code&gt;update_env.sh&lt;/code&gt;, and then auto-activate the environment.&lt;/p&gt;
&lt;p&gt;If my environment needs change, I can always update the environment YAML spec file (e.g. &lt;code&gt;lektor.yml&lt;/code&gt;, or &lt;code&gt;bayesian.yml&lt;/code&gt;) in the central repository, and use that to automatically update individual project environments.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/4/28/defended/">
    <title type="text">Defended!</title>
    <id>urn:uuid:3e537c85-bdf2-3a78-94ee-7b0a49170d55</id>
    <updated>2017-04-28T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/4/28/defended/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;It is done! I have defended my doctoral thesis, supervised by Prof. Jonathan A. Runstadler, advised by Prof. Mark Bathe and Prof. Jukka-Pekka Onnela, conducted as a student in the Department of Biological Engineering at MIT.&lt;/p&gt;
&lt;p&gt;Looking back, it's been an amazingly fun journey, and I'll be updating this space with a more detailed account of the thesis defence process. Stay tuned!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/4/24/thesis-defence/">
    <title type="text">Thesis Defence!</title>
    <id>urn:uuid:a6f99998-8ca5-3fe4-bbc4-ec2413e0b713</id>
    <updated>2017-04-24T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/4/24/thesis-defence/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;My thesis defence announcement has been made to the department!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Date:&lt;/strong&gt;  Thursday, April 27th, 2017&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time:&lt;/strong&gt;  2:00 PM&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Location:&lt;/strong&gt;  56-614&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;b&gt;Identification of Reassortant Influenza Viruses at Scale - Algorithm and Applications&lt;/b&gt;&lt;/center&gt;&lt;center&gt;by&lt;/center&gt;&lt;center&gt;Eric Ma&lt;/center&gt;&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Reassortment is a reticulate evolutionary process that results in genome shuffling; the most prominent virus known to reassort is the influenza A virus. Methods to identify reassortant influenza viruses do not scale well beyond hundreds of isolates at a time, because they rely on phylogenetic reconstruction, a computationally expensive method. This thus hampers our ability to test systematically whether reassortment is associated with host switching events. In this thesis, I use phylogenetic heuristics to develop a new reassortment detection algorithm capable of finding reassortant viruses in tens of thousands viral isolates. Together with colleagues, we then use the algorithm to test whether reassortment events are over-represented in host switching events and whether reassortment is an alternative 'transmission strategy' for viral persistence.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Committee&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jonathan Runstadler, Assistant Professor of Biological Engineering and Comparative Medicine, MIT (Advisor)&lt;/li&gt;
&lt;li&gt;Mark Bathe, Associate Professor of Biological Engineering, MIT (Committee Chair)&lt;/li&gt;
&lt;li&gt;Jukka-Pekka Onnela, Assistant Professor of Biostatistics, Harvard School of Public Health&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/4/21/moving-on-from-mit/">
    <title type="text">Moving on from MIT</title>
    <id>urn:uuid:d82b5e60-c156-3c44-a33d-32dcda309a66</id>
    <updated>2017-04-21T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/4/21/moving-on-from-mit/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;It's my final week before defending my thesis.&lt;/p&gt;
&lt;p&gt;The thesis has been submitted to my committee, and my slides, as usual, are being made until the last minute.&lt;/p&gt;
&lt;p&gt;I've had a number of conversations with a number of people, both in person and via email, and a few recurring themes start showing up.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New Challenges&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Scientists are artists in some senses, computational scientists particularly, and I think I'm ready for a new challenge.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jobs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;People invariably ask, &quot;What's next?&quot; I tell them that I've ruled out a &quot;traditional post-doc&quot;, and that  I'm not wedded to the academic ivory tower, I'm wedded to my wife, and so if the timing doesn't work out for independent research fellows positions, I'm jumping out. Well, as things turned out, yes, I'm jumping out, and I'm looking forward to this new journey!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data Science&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A few months ago, I was pretty deflated with the job search. Interviews were slow to come, and I began to think that all the &quot;hype&quot; around life science DS was just that - hype - and that the demand wasn't there. A few months later, I'm proven wrong, and quite happily proven wrong too.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Insight&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I signed the Insight Health Data Science Fellows contract, to join them for 7 weeks in the summer. Many were perplexed - isn't Insight all about getting a job? Not really. For me, it's about meeting like-minded individuals and being able to network with them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Interviews&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I've done interviews at a few places now, and the response has been very positive. No offers yet, but nonetheless these are all places where I can foresee myself being valued for what I can contribute, while having fun working with colleagues on new problems.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feelings&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The defence, at this point, has this magical effect of inducing anxiety at times, and feeling like &quot;just another thing to do&quot; at other times. I'm not sure what to make of this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thesis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My thesis, as it turns out, is super duper short. The departmental average range is on the order of 100-400 pages. Mine stands at about 80, including references, with double-spaced text, and sometimes having one figure/table on one page. I think I've broken some departmental records here...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Audience&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Someone asked, &quot;Who is your defence audience going to be?&quot; I've decided it'll be for my committee, who have supported my intellectual journey through infectious disease, computation, and data science. In some ways it's my &quot;final performance&quot; during grad school, a way of saluting their support.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;As the clock winds down, I'm reminded of that phrase from Philippians:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;... forgetting what lies behind and straining forward to what lies ahead... (&lt;a href=&quot;https://www.bible.com/111/PHP.3.13-14&quot;&gt;Philippians 3:13-14&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Laurels, yes, I have acquired indeed. MIT is no slouchy place to graduate from, and it's a privilege to have this degree. I've had the privilege and opportunity to remake my skillset while having fun along the way. But it's no time to rest on my laurels. It's time to start serving the world through the skillset I have been given. Onward!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/4/7/staying-nimble/">
    <title type="text">Staying Nimble</title>
    <id>urn:uuid:0effa933-9e9b-351f-9588-6fdb19783766</id>
    <updated>2017-04-07T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/4/7/staying-nimble/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;As I wrap up grad school, one thought recurrently comes to mind: as we grow older, do we intrinsically lose mental agility, nimbleness and ability to learn? Or is it because of external factors that cause one to become less adventurous, less curious, and hence, less able to learn new things?&lt;/p&gt;
&lt;p&gt;I find myself having flashes of fear crop up as I observe those who are older than me. They are stuck in between a hard place and a rock. Their skills may be on the wane (in terms of demand). They want to learn new things, but have to continue doing the old things to keep the ship afloat. I can imagine, it feels tough to be in that kind of position! Without the safety net to take a risk and learn something new, they may be stuck in a dying trade. Will I have to face the same fate? Is it avoidable, or even perhaps, surmountable?&lt;/p&gt;
&lt;p&gt;The even harder part is staying intellectually nimble, and not being stuck in particular ways of thought. Is that an intrinsic property of aging, or not?&lt;/p&gt;
&lt;p&gt;Just some questions I've been pondering...&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/3/28/thesis/">
    <title type="text">Thesis</title>
    <id>urn:uuid:4d271fbc-91f1-3867-9da4-5134e9cfc245</id>
    <updated>2017-03-28T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/3/28/thesis/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;I've finally turned in a polished draft of my thesis (&lt;a href=&quot;http://ericmjl.github.io/thesis&quot;&gt;HTML&lt;/a&gt; or &lt;a href=&quot;http://www.ericmjl.com/cv/thesis.pdf&quot;&gt;PDF&lt;/a&gt;) to my committee! My thesis topic is on the development of an algorithm to identify reassortant influenza viruses from large sequence databases, and its application to the study of influenza's evolution and ecology.&lt;/p&gt;
&lt;p&gt;Well, actually, it was last week when I finished it, but I've been doing the job hunt the past week that I've delayed on writing this blog post.&lt;/p&gt;
&lt;p&gt;Apart from the written summary of the work that I've been doing, I wanted to simultaneously write for PDFs and for the web, so I started assembling a software toolchain that compiles my raw markdown files, converts figures from PDF to JPG, and simultaneously builds the PDF and the HTML versions. A lot of Python packages, including &lt;a href=&quot;https://github.com/mplewis/csvtomd&quot;&gt;&lt;code&gt;csv2md&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;https://github.com/tomduck/pandoc-xnos&quot;&gt;pandoc-xnos&lt;/a&gt; series, and non-Python tools, including ImageMagick (&lt;a href=&quot;https://www.imagemagick.org/script/index.php&quot;&gt;https://www.imagemagick.org/script/index.php&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Yes, I know I could have done most of this with Authorea, but being me, building things and doing reverse engineering is also kind of fun! (Especially for learning purposes.)&lt;/p&gt;
&lt;p&gt;I hope you enjoy my thesis!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/3/11/default-bayesian-models/">
    <title type="text">&quot;Default&quot; Bayesian Models</title>
    <id>urn:uuid:ae4ec6e0-f33d-39a8-bf22-43b0eabb0bb4</id>
    <updated>2017-03-11T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/3/11/default-bayesian-models/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;As a positive distraction from my thesis writing, I've been thinking a bit about the statistical crisis in biomedical sciences and psychology research, and how it might be mitigated.&lt;/p&gt;
&lt;p&gt;A number of &lt;a href=&quot;https://profiles.stanford.edu/john-ioannidis&quot;&gt;opponents of p-values&lt;/a&gt; and &lt;a href=&quot;http://www.indiana.edu/~kruschke/&quot;&gt;proponents of Bayesian inference&lt;/a&gt; have influenced my thinking around this issue. As such I have come to the conclusion that Bayesian estimation and inference should be more widely used, because it essentially comes with interpretable uncertainty built into the inference philosophy.&lt;/p&gt;
&lt;p&gt;I think one thing preventing adoption of Bayesian inference methods is their flexibility (read: complexity). How does one compose an model with little grounding in statistics?&lt;/p&gt;
&lt;p&gt;To address this problem, I've started putting together &lt;a href=&quot;https://github.com/ericmjl/bayesian-analysis-recipes&quot;&gt;Jupyter notebooks&lt;/a&gt; showing common problems in the experimental sciences and a sensible default model that one can use for that kind of problem.&lt;/p&gt;
&lt;p&gt;For me, a recurrent (and very interesting) theme came up. The nature of probabilistic graphical models is such that if we are able to forward-simulate how the data may be generated, then given the data and a loss function, fitting the data is merely a matter of optimization. The core idea behind these notebooks, then, is that there are a small number of &quot;generic&quot; models of how data may be generated that can cover a large proportion of scenarios, particularly in scenarios where we don't have sufficiently good theory to forward-simulate the complex data-generating distribution underlying the data.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/2/13/bostons-geospatial-data/">
    <title type="text">Boston's Geospatial Data</title>
    <id>urn:uuid:01107519-7bae-33f4-8b3c-b0cd4b2532c4</id>
    <updated>2017-02-13T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/2/13/bostons-geospatial-data/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;I finally did it!&lt;/p&gt;
&lt;p&gt;The city of Boston recently released their &lt;a href=&quot;http://data.boston.gov/&quot;&gt;data&lt;/a&gt; in the open. I wanted to have an excuse to play with geospatial data, so as a distraction from thesis &amp; proposal writing, I hunkered down for about a workday's worth of time and put together a &lt;a href=&quot;http://github.com/ericmjl/boston-gov-data/&quot;&gt;bokeh app&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this web app, the end user can select from one of a number of geospatial datasets released, and visualize the distribution of those data points. There's no added metadata right now, but if I get fed up with thesis &amp; proposal writing I might go back and add in metadata hover/tooltips.&lt;/p&gt;
&lt;p&gt;I hope you have fun cloning the repo and running it!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/2/8/numba-my-first-attempt-at-being-serious-with-it/">
    <title type="text">Numba: My first attempt at being serious with it</title>
    <id>urn:uuid:ca866109-e006-37e3-bd91-00715850b371</id>
    <updated>2017-02-08T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/2/8/numba-my-first-attempt-at-being-serious-with-it/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;This evening, I saw a Tweet about using &lt;code&gt;numba&lt;/code&gt;, and I thought, it's about time I give it a proper shot. I had been solving some dynamic programming problems just for fun, and I thought this would be a good test case for &lt;code&gt;numba&lt;/code&gt;'s capabilities.&lt;/p&gt;
&lt;p&gt;The DP problem I was trying to solve was that of collecting apples on a grid. Here's how the problem is posed:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I have a number of apples distributed randomly on a grid. I start at the top-left hand corner, and I'm only allowed to move downwards or to the right. Along the way, I pick up apples. What's the maximum number of apples I can pick up along the way?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a classic 2-dimensional DP problem. I simulated some random integers:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reshape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I then wrote out my solution, and wrapped it in two versions of the function call: one native and one numba-JIT'd.&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Let&amp;#39;s collect apples.&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numba&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jit&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@jit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;collect_apples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sum_apples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;val_left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;val_left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;val_up&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;val_up&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sum_apples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val_left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum_apples&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;collect_apples_nonjit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sum_apples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;val_left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;val_left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;val_up&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;val_up&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sum_apples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val_left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val_up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum_apples&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's the performance results:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;collect_apples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;The slowest run took 4.27 times longer than the fastest. This could mean that an intermediate result is being cached.
10000 loops, best of 3: 99.7 µs per loop&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;collect_apples_nonjit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;10 loops, best of 3: 50.3 ms per loop&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Wow! Over 500-fold speedup! All obtained for free using the &lt;code&gt;@jit&lt;/code&gt; decorator.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/2/6/data-diagnostics-missingno/">
    <title type="text">Data Diagnostics: missingno</title>
    <id>urn:uuid:e7e5e35e-8e3b-383d-bc1e-529241c76d8e</id>
    <updated>2017-02-06T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/2/6/data-diagnostics-missingno/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;Sometimes, all that you need is a visual cue on whether the data you have on hand are complete or not. Looking at a table can be dizzying at times, so I'm very glad I found this packaged called &lt;a href=&quot;https://github.com/ResidentMario/missingno&quot;&gt;&lt;code&gt;missingno&lt;/code&gt;&lt;/a&gt;! It provides a way to quickly visualize the &lt;strong&gt;&quot;nullity&quot;&lt;/strong&gt; of your dataset. See an example below:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../../../../../blog/2017/2/6/data-diagnostics-missingno/data-completeness.jpg&quot;&gt;&lt;img src=&quot;../../../../../blog/2017/2/6/data-diagnostics-missingno/data-completeness-small.jpg&quot; alt=&quot;Displaying nullity of a data set.&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's built on top of &lt;code&gt;matplotlib&lt;/code&gt;, and takes in &lt;code&gt;pandas&lt;/code&gt; DataFrames, which means it plays very nicely with the rest of the PyData stack. I recently took it for a tour when I did a quick stats consult with Mia Lieberman (DCM); the above plot was made using her data, used with permission.&lt;/p&gt;
&lt;p&gt;Highly recommended package!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/1/25/verily-interview/">
    <title type="text">Verily Interview!</title>
    <id>urn:uuid:20e64a7e-7f92-3762-a694-b4608a5a5c0a</id>
    <updated>2017-01-25T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/1/25/verily-interview/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;I have finished my first complete job interview! I'm happy for the experience, no matter what the result is, as it's a very eye-opening one. I've been in an ivory tower for quite a while, so going out and seeing what the experience like is worthwhile enough, even though it'd also be a very nice icing on the cake to have a job offer too.&lt;/p&gt;
&lt;p&gt;If I'm not mistaken, I'm bound by NDA not to write/speak about the specifics of the interview, but I probably can speak about it in general. Overall, they were very welcoming! I was lodged in a very nice hotel just 6 minutes away from Verily by foot, with breakfast included (yum!). 5 people served as my interviewers, and I had lunch with a more senior person to learn more about the company's history; turns out 2 of them share a Boston connection as well.&lt;/p&gt;
&lt;p&gt;There was a good mix of coding and biology, and after the interview, I immediately went back and coded up my answer to my second interviewer's questions... only to find out I had done it wrong! Oh well :-). What's done is done, and I now know the combinatorics functions in the Python standard library much better.&lt;/p&gt;
&lt;p&gt;I also went back and thought more about the other coding problem, asked by my final interviewer. It was a frequentist statistics question, and I had been very much in a Bayesian frame of mind when he asked the question, so I was tripped up by my own biases when that happened. (There are foundational philosophical differences between the Bayesian and frequentist statistical mind sets, but I won't go in that direction.)&lt;/p&gt;
&lt;p&gt;Three of my other interviewers are very interested in the biological question behind what I was working on, and so I had a much smoother time (I think) with them. One was a wet bench scientist, and the other two do computation work as part of the computational biology team. I also think that my time with them played to my strengths, which are translating the biological problems into code, rather than making algorithms efficient. Not that I'm ruling out learning how to write efficient algorithms, though - I'd definitely love to master that! I say that my time with them played to my strengths because I was able to show them the thought process of how I turned a biological problem into a computable problem, and was able to highlight where the limitations of what I did were. My third and fourth interviewers took a deep interest in my work, and I was really, really happy to share with them what I'd been doing.&lt;/p&gt;
&lt;p&gt;Overall, a very fun experience! Big thanks to the HR and Comp Bio teams there, it was an intense day, but it was also very fun. I'm now just waiting for my red-eye flight to go back to Boston to teach a Data Carpentry workshop at Tufts Medical. Hope I survive till noon tomorrow!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/1/17/building-bokeh-apps/">
    <title type="text">Building Bokeh Apps!</title>
    <id>urn:uuid:c4372020-1787-3eea-8253-c9e1e6ea99cc</id>
    <updated>2017-01-17T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/1/17/building-bokeh-apps/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;I finally did it - I built a Bokeh server app for myself!&lt;/p&gt;
&lt;p&gt;All of last week, I brought my UROP student Vivian and a fellow church friend Lin to the &quot;Data Science with Python&quot; &lt;a href=&quot;http://computefest.seas.harvard.edu&quot;&gt;skill-building workshop series&lt;/a&gt;, hosted by the &lt;a href=&quot;http://iacs.seas.harvard.edu&quot;&gt;Harvard IACS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As I already knew most of what was going to be taught, I decided that it'd be a fun thing to try playing with the dataset that they used for the contest. (Having a contest was also extra motivation to try building something I've never done before.)&lt;/p&gt;
&lt;p&gt;The goal of the contest was &quot;to build a visualization of the UCI forest dataset that would help an analyst make decisions&quot;. The UCI forest dataset basically asks us to predict forest cover type from cartographic variables. As I had always wanted to use Bokeh to build a data dashboard, I thought I should give it a shot with the UCI dataset.&lt;/p&gt;
&lt;p&gt;What I eventually built were two things. The first one was a linked scatter-plot dashboard to visualize how the quantitative variables varied with one another and how they grouped by forest cover type. Here, the user can select the two variables that they want to visualize together, using drop-down menus.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../../../../../blog/2017/1/17/building-bokeh-apps/bokehscatter-full.png&quot;&gt;&lt;img src=&quot;../../../../../blog/2017/1/17/building-bokeh-apps/bokehscatter-small.png&quot; alt=&quot;Bokeh scatterplot&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The second one was a bar chart showing the mutual information between the categorical variable values and the forest cover type. Here, the user can select from over 40+ variables, and their mutual information score will be displayed as one of the bars in the bar chart.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../../../../../blog/2017/1/17/building-bokeh-apps/bokehselect-full.png&quot;&gt;&lt;img src=&quot;../../../../../blog/2017/1/17/building-bokeh-apps/bokehselect-small.png&quot; alt=&quot;Bokeh select&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As usual, I copied heavily from the examples and then modified it for my own use. Breaking the copied app helped me figure out where my cognitive blind spots were.&lt;/p&gt;
&lt;p&gt;Here's what I've learned.&lt;/p&gt;
&lt;p&gt;Firstly, I finally have wrapped my head around callback functions and their use in GUI applications. The idea behind callbacks is that when I click on a GUI element (e.g. button) or change the GUI element's state (e.g. selecting a checkbox, typing into a textbox), that function is called that &quot;does something&quot;. What's that something? Well, it's any action I decide that needs to be taken.&lt;/p&gt;
&lt;p&gt;Secondly, I finally figured out how non-intimidating Bokeh server really is. It's like... Flask, except for data visualizations. And it takes care of most of the HTML hard lifting for the data visualization portion.&lt;/p&gt;
&lt;p&gt;Thirdly, I finally got 'linked plots' working, in which the axes scales or data selections are shared across plots. I noticed it works when using the mid-level &quot;plotting&quot; interface, but doesn't work when using the high-level &quot;charts&quot; interface. Definitely something to keep in mind.&lt;/p&gt;
&lt;p&gt;Fourthly, I saw how Bokeh server allows us to write custom Python code for callbacks. At least for me, it's much more user-friendly this way, as I find JS idioms to be a bit wonky. Maybe I'm just not used to them. Either way, being able to use custom Python means I'm able to do things like filtering Pandas DataFrames before pushing the data onto the plot.&lt;/p&gt;
&lt;p&gt;Finally, I got to use the VBar contribution I made to the Bokeh library last year! Though I eventually moved my bar plots to the &quot;charts&quot;-level API, my initial implementation was done using the &quot;plotting&quot;-level API. It brought me a modicum of satisfaction to use the &lt;code&gt;vbar&lt;/code&gt; glyph, something that I had contributed (of course, acknowledging the amount of hand-holding provided by Sarah Bird and Bryan Van De Ven, who are the lead developers of Bokeh).&lt;/p&gt;
&lt;p&gt;My code can be found online &lt;a href=&quot;https://github.com/ericmjl/iacs2017&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/1/5/on-learning-math/">
    <title type="text">On Learning Math</title>
    <id>urn:uuid:b82c5bec-f938-34c7-a487-2549994f4359</id>
    <updated>2017-01-05T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/1/5/on-learning-math/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;Though I will admit to being somewhat algebra-blind (more on that later), I wasn't necessarily &lt;em&gt;bad&lt;/em&gt; at math concepts. I did have one big problem with the way I was learning math, though - it always seemed to be more theoretical and less applied, as if solving puzzles for solving puzzles' sake was the best way to approach learning math.&lt;/p&gt;
&lt;p&gt;I'll grant that, yes, many mathematicians and statisticians I know, are one of those types where doing and learning math doesn't have to be tied to some applied goal, and for whom math is viewed as intrinsically fun. But... I'm not one of those types, and it was for this reason I nearly abandoned quantitative thinking in my undergrad. Math was boring after Science One, because I wasn't shown how it was applicable to real-world problems in upper-year courses. Yet, after this PhD, I'll have essentially developed an area of expertise in some hybrid of statistical evolutionary biology and deep learning for biochemistry. Makes me wonder whether the current mode of puzzle-/theory-driven math (and perhaps even CS) is actually driving off people who might not be interested in the intrinsic fun of math, and are more interested in the applied fun?&lt;/p&gt;
&lt;p&gt;Science One math was taught by Leah Keshet and Mark MacLean. The part I remember most vividly was learning about differential equations as applied to ecological problems and biochemical reaction kinetics. Along the way, we had to learn differentiation and integration... not for differentiation and integration's sake, but for figuring out useful properties of these two wildly different systems. &lt;em&gt;Now that was amazing math.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;What do I mean by algebra-blind?&lt;/em&gt; I basically mean that I tend to confuse algebraic symbols, and can't hold them in my head without having some lookup-table/glossary for what they mean. The lookup-table of algebraic symbols to their meaning was a hack that I never mastered until I finished formal math education; yet it was extremely helpful to have when I was discussing math with my collaborators up at Harvard. Most of my score deductions in math tests came from confusing algebraic symbols with one another...&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2017/1/3/on-openness-equals-source-code-inspectability/">
    <title type="text">On &quot;Openness = Source Code Inspectability&quot;</title>
    <id>urn:uuid:a61f9380-238f-30b2-a3e2-fb031bce42ea</id>
    <updated>2017-01-03T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2017/1/3/on-openness-equals-source-code-inspectability/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;One tenet of open science is the notion of &quot;being able to inspect the source code&quot;. It's a good, lofty goal, but it comes with a big assumption that I think needs to be made clear.&lt;/p&gt;
&lt;p&gt;This assumption is that scientists who are reviewing papers that incorporate code are capable of accurately interpreting the source code in a reasonable amount of time, have a sufficient working knowledge of the language that the work is implemented in, while also possessing sufficient domain knowledge to review the paper.&lt;/p&gt;
&lt;p&gt;That middle point is the current sore point. In certain fields, such as artificial intelligence/machine learning and computational biology (both my pet fields), this is not an issue, as the substrate of scientific work is code. On the other hand, there's the scenario of experimental work that is analyzed with custom code. Here, the substrate of the scientific work is not primarily the code, it is the experiment. Reviewers who evaluate this type of work may not necessarily have the expertise to inspect the source code of the pipeline. I am not aware of journals whose editors make the extra effort to solicit a team of reviewers capable of covering both experimental design and code inspection.&lt;/p&gt;
&lt;p&gt;To be just a tad more pedantic, I'd insist that code inspection is important. Having myself reviewed a paper for PLoS Computational Biology, I was interested in the &lt;em&gt;accuracy&lt;/em&gt; of the implementation (done in R), not simply whether I could re-run the code and obtain the same results (&lt;em&gt;reproducibility&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;(Side note: though I'm a Python person, I'd be happy to review R code, though I would do so with the recognition that I'm not as well-versed in R idioms and coding patterns as I am with Python's. I'd be less-than-fully-qualified under the &quot;sufficient working knowledge&quot; criteria.)&lt;/p&gt;
&lt;p&gt;In summary, my claim here is that openness requires more scientists who are also technically qualified, in order to achieve the goal of reproducibility + veracity. Without the ability to inspect source code, we're only left with reproducibility, which is not good enough.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2016/12/27/my-flask-app-building-sprint/">
    <title type="text">My Flask app-building sprint</title>
    <id>urn:uuid:4e988c90-5eb1-394a-aaee-f3cf4cfc1ab1</id>
    <updated>2016-12-27T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2016/12/27/my-flask-app-building-sprint/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;&lt;p&gt;This winter, I decided to embark on a coding project purely for fun. In preparation to build my own Raspberry Pi photo display, I wanted to build an easily-installable, portable (across operating systems) and completely hackable stand-alone image displayer. This project ended up being an awesome way to get myself familiarized with a wide variety of concepts in web development, software packaging, and software distribution. I learned a ton, and I want to share the process behind it.&lt;/p&gt;
&lt;p&gt;The design goals were as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It does one and only one thing well: run the app from any directory, and show the photos in that directory in a random order.&lt;/li&gt;
&lt;li&gt;It has to be easily distributable. I chose to use &lt;code&gt;pip&lt;/code&gt; as my distribution mechanism, partly because of familiarity, partly be cause it is sufficiently ubiquitous (with Python).&lt;/li&gt;
&lt;li&gt;It should be completely hackable. My source code is up on &lt;a href=&quot;https://github.com/ericmjl/imgdisplay&quot;&gt;GitHub&lt;/a&gt;. Anybody can fork it, hack it, and redistribute it. Go for it - it's BSD-3 licensed!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The philosophical goals were pretty simple. Learn how to do the whole stack from scratch, and be free from commercial, closed-source software constraints by being free to build exactly what I need from reusable components.&lt;/p&gt;
&lt;h1 id=&quot;writing-the-app-logic&quot;&gt;Writing the App Logic&lt;/h1&gt;&lt;p&gt;My choice of tools were as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Python&lt;/code&gt; 3.5&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Flask&lt;/code&gt;: great framework for web development in Python. Provides glue between Python and HTML.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pywebview&lt;/code&gt;: provides native GUI wrappers for each platform.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;click&lt;/code&gt;: awesome framework for command-line options.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My thought process here was as such: write the user-facing interface using HTML, and write application logic in Python, and we get automatic cross-platform portability. Run the app from the command-line, which is the lowest-common denominator for running applications.&lt;/p&gt;
&lt;p&gt;I structured my app as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+ imgdisplay/
    + imgdisplay/
        + __init__.py
        + imgdisplay.py  # this is where the main application logic is found.
        + static/
            + styling.css
        + templates/
            + img.html
    + .gitignore
    + LICENSE
    + MANIFEST.in
    + README.md
    + requirements.txt
    + setup.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By most standards, this (at least in the eyes of pros) is probably a very, very simple Flask app.&lt;/p&gt;
&lt;p&gt;The app logic was the first part that I tackled. Let's start with the file &lt;code&gt;imgdisplay.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_from_directory&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;webview&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;click&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;threading&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Section (A)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tmpl_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abspath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                        &lt;span class=&quot;s1&quot;&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template_folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmpl_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Section (B)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getcwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.jpg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;img.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;img.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;No images in directory&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Section (C)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/image/&amp;lt;path:imgname&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;random_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imgname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_from_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getcwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imgname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as_attachment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Section (D)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@click.command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@click.option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;--port&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Port number&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@click.option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;--host&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Host name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Architected this way because my console_scripts entry point is at&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# start_server.&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daemon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;webview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;PiPhoto Display&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://127.0.0.1:{0}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Section (E)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;start_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's my commentary on each of the sections.&lt;/p&gt;
&lt;h2 id=&quot;section-a:-flask-boilerplate.&quot;&gt;Section A: Flask boilerplate.&lt;/h2&gt;&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmpl_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abspath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
                        &lt;span class=&quot;s1&quot;&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template_folder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmpl_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, we instantiate a Flask instance called &lt;code&gt;app&lt;/code&gt;. The &lt;code&gt;tmpl_dir&lt;/code&gt; variable was later added on, because I later learned that Flask apps had to look within the project directory for the &lt;code&gt;templates&lt;/code&gt; folder; this variable ensures that the correct template directory path is specified.&lt;/p&gt;
&lt;h2 id=&quot;section-b:-main-application-logic.&quot;&gt;Section B: Main application logic.&lt;/h2&gt;&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getcwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.jpg&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;img.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;img.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;No images in directory&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is Flask's &quot;hello world&quot; function expanded. What we're doing here is reading a list of &lt;code&gt;.jpg&lt;/code&gt; files from the bash shell's current working directory. If there are images present, we tell choose one file, and tell Flask to render the template (&lt;code&gt;render_template&lt;/code&gt;) &lt;code&gt;img.html&lt;/code&gt; passing in an &lt;code&gt;image&lt;/code&gt; to the &lt;code&gt;image&lt;/code&gt; keyword argument. If none, we pass in an error text message to the &lt;code&gt;error&lt;/code&gt; keyword argument.&lt;/p&gt;
&lt;p&gt;If this were a more complicated app, we would probably move to an MVC-like model, where the application logic would be in an importable module adjacent to the rendering code. Here, because the logic is simple enough, and only really amounts to three lines of Python, it's simple enough to not require placing it in a separate Python module.&lt;/p&gt;
&lt;p&gt;I think at this point, it's best to show how these will get rendered. Below is &lt;code&gt;img.html&lt;/code&gt;, the template that is being used.&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ url_for(&amp;#39;static&amp;#39;, filename=&amp;#39;styling.css&amp;#39;) }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;refresh&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        {% if image %}
          &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ url_for(&amp;#39;random_image&amp;#39;, imgname=image) }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        {% endif %}

        {% if error %}
          &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;color:white&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
              {{ error }}
          &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        {% endif %}
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Flask uses &lt;code&gt;jinja2&lt;/code&gt; templating - what this basically means is that we can insert Python-like code into other text-based files, allowing for passed in values to be substituted. For example, consider the block below:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% if error %}
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;color:white&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      {{ error }}
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What this is essentially saying is: if the &quot;error&quot; keyword from &lt;code&gt;render_template&lt;/code&gt; is not a null value, fill in the value passed to the &lt;code&gt;error&lt;/code&gt; keyword (&lt;code&gt;{{ error }}&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;What about the header? It's got something much more complicated in there, the &lt;code&gt;url_for&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ url_for(&amp;#39;static&amp;#39;, filename=&amp;#39;styling.css&amp;#39;) }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;refresh&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What this is saying here is render the URL for (&lt;code&gt;url_for&lt;/code&gt;) the static directory to load the CSS file &lt;code&gt;styling.css&lt;/code&gt;, which allows us to use the static CSS file to style the user interface appropriately. If you inspect the HTML source after rendering, you will see that it maps to &lt;code&gt;/static/styling.css&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What about the image?&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% if image %}
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ url_for(&amp;#39;random_image&amp;#39;, imgname=image) }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's a bit complicated, so let me try my best to explain what's going on. This uses the &lt;code&gt;url_for&lt;/code&gt; function, which is Flask magic for saying, &quot;render the URL for a particular function&quot; (&lt;code&gt;{{ url_for('random_image',...&lt;/code&gt;), while passing in the necessary keywords arguments to that function (&lt;code&gt;... imgname=image) }}&lt;/code&gt;). But... where did the &lt;code&gt;random_image&lt;/code&gt; function come from, and why is it's keyword arguments named as &lt;code&gt;imgname&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Well, that's the best segue into Section C.&lt;/p&gt;
&lt;h2 id=&quot;section-c:-random_image...?&quot;&gt;Section C: random_image...?!&lt;/h2&gt;&lt;p&gt;If by the end of my own explanation you don't get it, don't worry. The inner workings remain a bit of black magic to me still. Here's the code:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/image/&amp;lt;path:imgname&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;random_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imgname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_from_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getcwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imgname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as_attachment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function is what is called in the &lt;code&gt;img.html&lt;/code&gt; template. The function takes in an image name &lt;code&gt;imgname&lt;/code&gt; keyword argument, which is then passed to Flask's &lt;code&gt;send_from_directory()&lt;/code&gt; function. Here, we are essentially saying, &quot;get the file &lt;code&gt;imgname&lt;/code&gt; from the directory &lt;code&gt;os.getcwd()&lt;/code&gt;, as an attachment (&lt;code&gt;as_attachment=True&lt;/code&gt;), and send it to Flask.&quot;&lt;/p&gt;
&lt;p&gt;Somehow, this provides the correct way to send the image file to the browser renderer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Side note:&lt;/strong&gt; Figuring this out turned out to be the better of a whole day's worth of debugging and reading through the Flask package documentation, plus another half a day on Stack Overflow trying to figure out the right coding patterns. Once I figured this out, almost everything else fell into place for the minimum-viable-product version of the app.&lt;/p&gt;
&lt;h2 id=&quot;section-d:-execution&quot;&gt;Section D: Execution&lt;/h2&gt;&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@click.command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@click.option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;--port&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Port number&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@click.option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;--host&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Host name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;start_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Architected this way because my console_scripts entry point is at&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# start_server.&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;port&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;daemon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;webview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;PiPhoto Display&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                          &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://{0}:{1}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This part of the code was totally inspired by &lt;a href=&quot;https://joecodeswell.wordpress.com/2016/08/09/flask-with-pywebview-example/&quot;&gt;Joe Dorocak&lt;/a&gt;, but I had to modify it a little bit to fit my use case (using &lt;code&gt;console_scripts&lt;/code&gt; as part of the &lt;code&gt;entry_points&lt;/code&gt;). The idea here for this code is to create a new thread that runs the app, and then use pywebview to open a new GUI window that loads the appropriate URL. The other big idea is that I could invoke &lt;code&gt;imgdisplay&lt;/code&gt; from the command-line using the call:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ imgdisplay
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to do so, everything that needs to happen when executing has to happen within the function that the &lt;code&gt;imgdisplay&lt;/code&gt; bash command is mapped to; which happens to be &lt;code&gt;start_server&lt;/code&gt;. Joe's example puts all of the logic under &lt;code&gt;if __name__ == __main__&lt;/code&gt;, because the assumption there is that the code is executed by running:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python imgdisplay.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;According to the design goals stated above, the former fulfills the goals better than the latter, because in the latter, I would have to copy &lt;code&gt;imgdisplay.py&lt;/code&gt; into the directory that I needed. Therefore, I had to hack Joe's example a tiny bit to get it to work the way I wanted. If there's a better way to do it, I'd love to hear!&lt;/p&gt;
&lt;h2 id=&quot;section-e:-execution&quot;&gt;Section E: Execution&lt;/h2&gt;&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;start_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is boilerplate, but in case anybody wants to run the script from the main project folder (&lt;code&gt;imgdisplay/&lt;/code&gt;), for whatever reason, they'd be able to.&lt;/p&gt;
&lt;h1 id=&quot;styling&quot;&gt;Styling&lt;/h1&gt;&lt;p&gt;I did my prototyping using Chrome on macOS Sierra. The order in which I presented the code above corresponded roughly to the order in which the code became more and more complex. I had to iterate between coding + testing in the browser. Styling was a pretty fun part of the iteration process. Here's my CSS code:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;PT Sans&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;padding-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;padding-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;padding-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;padding-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;max-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;max-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The idea behind the styling was to make the image stand out by using a black background, while making sure that the height of the image stayed a maximum of 600 px. In the future, I'd like this to be an adjustable parameter... or maybe not. We'll see.&lt;/p&gt;
&lt;h1 id=&quot;packaging-for-distribution&quot;&gt;Packaging for Distribution&lt;/h1&gt;&lt;p&gt;This is one of the places where I've had a number of spectacular failures in the past, particularly because Python's packaging documentation is, in my opinion, out of line with the Zen of Python's philosophy of &quot;there should be preferably one and only one way of doing things&quot;. I think what's missing from the official documentation is clear-cut examples for packaging Python packages, modules, and command-line programs, and examples of where they mix. If I get a chance in the future, I might contribute that.&lt;/p&gt;
&lt;h2 id=&quot;setup-script&quot;&gt;Setup Script&lt;/h2&gt;&lt;p&gt;Anyways, here's the setup script:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;setuptools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find_packages&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;r+&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;imgdisplay&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2016.12.26.19.35&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;A command-line app to slideshow photos in a directory.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;long_description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;README.md&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Eric J. Ma&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author_email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;my_email&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https://github.com/ericmjl/imgdisplay&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;install_requires&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;click==6.6&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s1&quot;&gt;&amp;#39;Flask==0.11.1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s1&quot;&gt;&amp;#39;pywebview==1.3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;packages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;license&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;LICENSE&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;entry_points&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;console_scripts&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;imgdisplay=imgdisplay.imgdisplay:start_server&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;package_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;imgdisplay/static/*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;imgdisplay/templates/*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;include_package_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before we go on, please ignore my version numbering system. It's essentially the current date and time... While I know semantic versioning and the likes, for this single project, I decided to go simple and not worry about more complex stuff.&lt;/p&gt;
&lt;p&gt;There's a few key stuff I learned here.&lt;/p&gt;
&lt;p&gt;Firstly, the big highlight: making my package command-line accessible.&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry_points&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;console_scripts&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;imgdisplay=imgdisplay.imgdisplay:start_server&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What this is saying is &quot;map the &lt;code&gt;start_server()&lt;/code&gt; function to the command &lt;code&gt;imgdisplay&lt;/code&gt;&quot;. That creates the &lt;code&gt;imgdisplay&lt;/code&gt; magic command that runs the app, because the entirety of the execution logic is contained in that function.&lt;/p&gt;
&lt;p&gt;Secondly, including static data:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;imgdisplay/static/*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;imgdisplay/templates/*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;include_package_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is &lt;strong&gt;very, very important&lt;/strong&gt; for running the Flask app. The &lt;code&gt;static&lt;/code&gt; and &lt;code&gt;templates&lt;/code&gt; folders are default folders that Flask automatically looks for. These have to be packaged and distributed together in order for the app to work properly.&lt;/p&gt;
&lt;h2 id=&quot;building-distribution&quot;&gt;Building Distribution&lt;/h2&gt;&lt;p&gt;To build the distribution at the command line, according to &lt;a href=&quot;http://www.plankandwhittle.com/packaging-a-flask-web-app/&quot;&gt;Plank &amp; Whittle's&lt;/a&gt; website, there are two options for Python packages: a binary file, which contains only Python code, and a source distribution, which contains Python code + other files packaged in. Flask apps can only be distributed as a source distribution, so binary distributions are out of luck. I made the mistake of uploading a binary distribution to PyPI, and that cost me hours of debugging to get out of it, which I finally did. So here's the &quot;correct&quot; set of commands needed to avoid this headache:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /path/to/project
$ &lt;span class=&quot;c1&quot;&gt;# execute the following line only if dist/ exists and there&amp;#39;s stuff inside&lt;/span&gt;
$ rm dist/*
$ &lt;span class=&quot;c1&quot;&gt;# the following command builds the source distribution&lt;/span&gt;
$ python setup.py sdist
$ &lt;span class=&quot;c1&quot;&gt;# the following command uploads the package to PyPI!!!!!!!!&lt;/span&gt;
$ twine upload dist/*
$ &lt;span class=&quot;c1&quot;&gt;# you will be prompted for username &amp;amp; password to PyPI&lt;/span&gt;
$ &lt;span class=&quot;c1&quot;&gt;# remove stuff under dist/* to keep it clean for updates.&lt;/span&gt;
$ rm dist/*
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At all costs, &lt;strong&gt;do not run&lt;/strong&gt; &lt;code&gt;python setup.py sdist bdist_wheel&lt;/code&gt;. This works for other pure Python packages, but not for Flask apps that are bundled with static files.&lt;/p&gt;
&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;&lt;p&gt;With that, that was it! Through this project, I was able to learn more about the insides of Python packaging &amp; distribution, making my Python tools accessible through the command line, developing web &amp; cross-platform interfaces, and working with really popular frameworks (Flask, click, pywebview). Big learning journey, only made possible because of some time taken off to let my mind wander away from other real work.&lt;/p&gt;
&lt;p&gt;Do I see this fitting in with my current work? Yep, absolutely. There's some times in research where nothing beats building a prototype of a final product that I'm envisioning, for example, the front-end to a&lt;/p&gt;
&lt;p&gt;I'd love to get feedback on how it could be improved, but more importantly, contributions are really welcome! Please be kind in feedback, I'm still a relative newbie with web development, so keeping things positive would help keep things encouraging. Hope you enjoyed the post!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2016/12/24/how-to-make-your-python-scripts-callable-from-the-command-line/">
    <title type="text">How to make your Python scripts callable from the command-line</title>
    <id>urn:uuid:08003a89-beab-3cd1-9def-4bb761224c67</id>
    <updated>2016-12-24T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2016/12/24/how-to-make-your-python-scripts-callable-from-the-command-line/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;So you've written this awesome Python module/script that does awesome stuff, but now you want to call it from the command line. I'm going to show you how to make this happen.&lt;/p&gt;
&lt;p&gt;First off, create your Python script. Below, borrowing from the &lt;a href=&quot;http://click.pocoo.org/5/&quot;&gt;Click&lt;/a&gt; package documentation, I'm going to show a script that is just slightly more complex than a simple &quot;hello world&quot;.&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# helloworld.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;click&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@click.command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@click.option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;--count&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Number of greetings.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@click.option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;--name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Your name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;The person to greet.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Simple program that greets NAME for a total of COUNT times.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;!&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vm&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's say this script is saved as &lt;code&gt;helloworld.py&lt;/code&gt; in your project directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+-- my_project/
    +-- helloworld.py
    +-- LICENSE
    +-- README.md
    +-- setup.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What you'd want to put in your &lt;code&gt;setup.py&lt;/code&gt; script is the following:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;setuptools&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;r+&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;helloworld&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2016.12.24&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;long_description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;README.md&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Eric J. Ma&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;author_email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ericmajinglong@gmail.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;py_modules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;helloworld&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;license&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;LICENSE&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;entry_points&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;console_scripts&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;aloha = helloworld:hello&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The key magic point here is &lt;code&gt;entry_points&lt;/code&gt;. What this portion is effectively saying is, &quot;attach the 'hello' function under the &lt;code&gt;helloworld&lt;/code&gt; script to the console command &lt;code&gt;aloha&lt;/code&gt;. (I'm being playful here for clarity; it may make much more sense to name your console command the same name as the Python module you're distributing.)&lt;/p&gt;
&lt;p&gt;Now, if you open a new terminal session, you can run &lt;code&gt;helloworld.py&lt;/code&gt; using the &lt;code&gt;aloha&lt;/code&gt; command, and use all of the command-line arguments that Click provides:&lt;/p&gt;
&lt;div class=&quot;hll&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ aloha --count &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;
Your name: Eric
Hello Eric!
Hello Eric!
Hello Eric!
&lt;/pre&gt;&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2016/12/20/female-doctors-are-better-than-male-doctors-for-real/">
    <title type="text">Female Doctors are Better than Male Doctors - For Real?</title>
    <id>urn:uuid:89a95d1a-3661-349f-bf53-8ae5d11489c2</id>
    <updated>2016-12-20T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2016/12/20/female-doctors-are-better-than-male-doctors-for-real/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;For real. Read on for the statistical perspective on why.&lt;/p&gt;
&lt;p&gt;I saw this article published by JAMA, posted by a number of my friends on Facebook. The claim here was that patients treated by women doctors show lower readmission rates than patients treated by men, controlling for as many other factors as can be plausibly controlled for.&lt;/p&gt;
&lt;p&gt;When I saw the clickbait-y headlines and posts by my mostly left-leaning friends basically going &quot;women are better than men&quot;, my first instinct was &quot;go check the stats&quot;. (I'm probably best labelled as centrist.) Indeed, I think I would have made Prof. Allen Downey proud - I didn't buy the p-values at face value. Rather, I was most interested in the effect size.&lt;/p&gt;
&lt;p&gt;If you check the main figure on the paper, it'll look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://jamanetwork.com/data/Journals/INTEMED/0/m_ioi160102f1.png&quot; alt=&quot;Figure 1, linked from the article&quot;&gt;&lt;/p&gt;
&lt;p&gt;Peeking into the text for a bit more context for mortality (it's roughly the same magnitude difference elsewhere).&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Physician Sex and Patient Mortality&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The final sample for the analyses of 30-day mortality rates included 1 583 028 hospitalizations treated by 57 896 physicians. Overall 30-day mortality for the entire sample was 179 162 (11.32%). Patients cared for by female physicians had lower 30-day mortality than did patients treated by male physicians (10.82% vs 11.49%; risk difference [RD], –0.67%; 95% CI, –0.80% to –0.54%; P &lt; .001; number needed to treat [NNT] to prevent 1 death, 149) after accounting for patient characteristics (Table 2). The difference in mortality persisted after adjustment for hospital fixed effects (female physicians, 10.91% vs male physicians, 11.46%; adjusted RD, –0.55%; 95% CI, –0.67% to –0.42%; P &lt; .001; NNT, 182). Further adjusting for physician characteristics had a limited effect on these results (female physicians, 11.07% vs male physicians, 11.49%; adjusted RD, –0.43%; 95% CI –0.57% to –0.28%; P &lt; .001; NNT, 233).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you look at just the difference between the two 'treatment' groups (male-treated vs. female-treated patients), there only seems to be a 0.42% difference in mortality rates after controlling for hospital patient characteristics, hospital fixed effects, physician characteristics, length of stay, use of care, discharge location, patient volume, and physicians’ years of practice. Damn, that's a really small difference! The effect size (here improperly defined as ratio of larger to smaller) is only 1.03. Hardly an effect worth mentioning, isn't it?&lt;/p&gt;
&lt;p&gt;Wrong!&lt;/p&gt;
&lt;p&gt;That 0.42% difference occurred from a sample size of more than ~1.5 million hospitalizations. This is mortality that we're speaking of here, so in context, we're talking about ~6,600+ fewer deaths when women treat patients. 6,600+! Hospitalizations happen frequently and in large numbers, so a small percentage difference still means large numbers of people. If you happen to be pro-life, this is something that you really should care about.&lt;/p&gt;
&lt;p&gt;I still take issue with the article's emphasis on &quot;statistically significant or not&quot; method of reporting the results, but I think that's a flaw of the medical literature publishing culture, and something that the authors probably had to conform to in order to successfully publish the results. Nonetheless, if you even just skim the text of the paper, the data are consistent across all comparisons made, regardless of whether the results were &quot;statistically significant&quot; or not. That's pretty strong evidence, in my opinion.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2016/12/15/experimenting-with-github-pages/">
    <title type="text">Experimenting with GitHub Pages</title>
    <id>urn:uuid:b224ecf4-430b-3b61-9ec4-20c4d0ad5b38</id>
    <updated>2016-12-15T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2016/12/15/experimenting-with-github-pages/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;I've been playing a ton with GitHub pages recently, and so far, I've been impressed! My main use case has been in creating places where I can host Reveal.js slides online, and showcasing some writing that I've put together that doesn't fit in my &quot;blog&quot; format. My &lt;a href=&quot;https://ericmjl.github.io/&quot;&gt;GitHub page&lt;/a&gt; showcases some of the best.&lt;/p&gt;
&lt;p&gt;Along the way, I've learned a ton. Here's some of the highlights.&lt;/p&gt;
&lt;p&gt;Firstly, I learned about standardizing project templates using &lt;a href=&quot;https://github.com/audreyr/cookiecutter&quot;&gt;&lt;code&gt;cookiecutter&lt;/code&gt;&lt;/a&gt;, a Python package available on conda-forge and the cheese shop (PyPI). Initially, I tried hacking my own cookiecutter-ish hodge-podge of scripts, particularly for downloading the necessary components for &lt;a href=&quot;https://github.com/hakimel/reveal.js/&quot;&gt;Reveal.js&lt;/a&gt;, but that didn't really work out, and I was eventually confused by my own logic. &lt;code&gt;cookiecutter&lt;/code&gt; eliminated all of the confusion, and was really easy to operate.&lt;/p&gt;
&lt;p&gt;Secondly, because I was able to nail down a template for building Reveal.js slides, I managed to convert two of my previous talks (a &lt;a href=&quot;https://ericmjl.github.io/uncovering-earths-virome/&quot;&gt;Journal Club&lt;/a&gt; on the Earth's virome, and the other my &lt;a href=&quot;https://ericmjl.github.io/big-data-boston-2016/&quot;&gt;Big Data Boston meetup talk&lt;/a&gt;, which were written in Markdown and converted to PDF, into Reveal.js versions. I dug a bit into the SASS toolchain, and found that Reveal.js used SCSS files that were then compiled to CSS, and made a few minor tweaks that standardized the font sizing to something more in-line with my tastes. I also used the GitHub pages to host an &quot;HTML notes&quot; copy of the slides that the audience can use to follow along.&lt;/p&gt;
&lt;p&gt;Thirdly, in the process of building the HTML notes, I created a CSS style that I ended up liking quite a lot, and it formed the basis of all of the pages that I ended up creating. The learning journey picking up the CSS specification was quite enjoyable, as things showed an immediate, one-to-one mapping between code and placement on the HTML canvas. This type of 'immediate', closed-loop feedback is important for learning stuff. When I had to go offline, thankfully there was &lt;a href=&quot;http://devdocs.io/&quot;&gt;DevDocs&lt;/a&gt; where I could look up all of the styling options available to different types of HTML.&lt;/p&gt;
&lt;p&gt;All in all, quite a fun experience! I have also put up my cookiecutter templates for &lt;a href=&quot;https://github.com/ericmjl/cookiecutter-talk&quot;&gt;talks&lt;/a&gt; and &lt;a href=&quot;https://github.com/ericmjl/cookiecutter-writing&quot;&gt;writing&lt;/a&gt; on GitHub, alongside a tutorial for the &lt;a href=&quot;https://ericmjl.github.io/easy-talk-slides-and-notes/&quot;&gt;slides&lt;/a&gt;, with the hope that it's useful for others!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2016/12/8/scientific-inquiry-laymans-version/">
    <title type="text">Scientific Inquiry, Layman's Version</title>
    <id>urn:uuid:08801406-0b26-39a8-bc2b-cc07a5caf24e</id>
    <updated>2016-12-08T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2016/12/8/scientific-inquiry-laymans-version/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;Today on Facebook, I saw a link shared by the friend of a professor at Berkeley whose group I nearly joined 6 years ago. (Life would have been very different if I did.) It was a link to a &lt;a href=&quot;http://www.bloomberg.com/graphics/2015-whats-warming-the-world/&quot;&gt;Bloomberg graphic&lt;/a&gt;, in which the article essentially outlined the scientific inquiry method in easy-to-follow, layman's terms.&lt;/p&gt;
&lt;p&gt;The presentation format was essentially as such: the graphic creator posed a series of hypotheses forward, and tested them using the data available on hand. &quot;Did X cause global warming? If it did, we would expect to see a correlation between levels of X and global average temperatures.&quot; A suite of plausible hypotheses (though nonetheless non-exhaustive) were presented: could it be CFCs? Ozones? Orbital changes? Volcanic activity? Finally, for each hypothesis, the data were charted to see if there was a visual correlation between the hypothesis variable and temperature. By a process of elimination, that's how the global scientific consensus has settled on greenhouse gases as the main driver of global warming.&lt;/p&gt;
&lt;p&gt;Could we be wrong? Definitely! The hypotheses, as I mentioned earlier, are non-exhaustive. Therefore, there still remains the low probability that the correct explanation has not been enumerated as a hypothesis put forth. That's okay! If there's another hypothesis to be tested, let it be tested by the same, consistent framework of evaluation.&lt;/p&gt;
&lt;p&gt;Regardless of the fact that the hypotheses are non-exhaustive, I would still consider it to be a low probability that newer hypotheses will overtake GHGs in credibility. Most of it stems from my (nonetheless non-exhaustive) reading of the scientific literature and layman scientific reporting. Additionally, as the apologist Ravi Zacharias has mentioned before, truth has to pass the test of coherence and correspondence: it must be part of a logically coherent whole, and it must have empirical evidence to support it. Without elaborating how, I will assert that GHGs as the causative factor of global warming passes those two tests.&lt;/p&gt;
&lt;p&gt;Anyways, props to the creative team at Bloomberg for putting &lt;a href=&quot;http://www.bloomberg.com/graphics/2015-whats-warming-the-world/&quot;&gt;the article&lt;/a&gt; together. Do check it out!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2016/12/1/the-renaissance-researcher/">
    <title type="text">The Renaissance Researcher</title>
    <id>urn:uuid:35f36000-476b-3470-a517-cce24024df8a</id>
    <updated>2016-12-01T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2016/12/1/the-renaissance-researcher/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;This is the computational biologist who knows how to design, execute, and analyze wet lab experiments and the generated data. This is the wet lab scientist who knows how to develop software that crunches the massive amounts of data that her experiment generates. Does this person exist?&lt;/p&gt;
&lt;p&gt;I'm going to make a bold statement, and then a bold prediction.&lt;/p&gt;
&lt;p&gt;This person does not exist. And this person will become huge in demand in the biosciences in the future. And yet this person will turn out to be a team.&lt;/p&gt;
&lt;p&gt;I think I'm qualified to make this statement. I've been on both sides of this dichotomy. I was a bench synthetic biologist, failed badly and went into computational evolutionary ecology, and then came back to the bench trying to marry together high throughout experimentation and deep learning. It's really, really tough to handle both at the same time.&lt;/p&gt;
&lt;p&gt;Part of it is a matter of context switching. Computation really requires continuous stretches of iterating between coding and thinking. Experiments, by contrast, represent a continuous disruption to focus time. It’s impossible to juggle both in parallel. Moreover, both require month-long stretches in order to have momentum, during which one or the other gets lost. If I code, I lose momentum with my experiments. If I run experiments, I lose momentum with my code. There’s either a cognitive or energy cost to juggling both at a high performance level.&lt;/p&gt;
&lt;p&gt;For me, it's a temperament issue. I learned during my three computation years developing algorithms that the quick turnover time of computation, to go from hypothesis to falsifying results, was something that I absolutely suited my temperament. I absolutely dreaded, and had no patience for the prospect of a failed hypothesis needing weeks to verify.&lt;/p&gt;
&lt;p&gt;I also work best in &quot;staggered sequential mode&quot;, not &quot;parallelized mode&quot;. Staggered sequential means as the results of an experiment become easier to forecast, I start something new. Parallelized mode means juggling things together even when the results aren't easily forecastable. There's a subtle distinction there. Parallelized mode doesn't work for me, because I get very easily confused between project details.&lt;/p&gt;
&lt;p&gt;With computation, that turnover time is often on the order of dozens of minutes max. With experiments, its weeks. With my temperament, I would much prefer the quick-turnover computational hypothesis testing rather than painstaking and slow rounds of hypothesis testing.&lt;/p&gt;
&lt;p&gt;Yet, as a computation type, I face the dilemma all the time: I have a hypothesis for which I have no data to test it with. This means going back into the lab, which means confronting the very pace that my temperament would prefer not to face. Alternatively, I can find people with whom I can collaborate.&lt;/p&gt;
&lt;p&gt;And that brings me to my point. I don't think there's such thing as the renaissance researcher. Rather, I think there is such a thing as a renaissance research team. Here, hypothesis generation and testing are a shared activity, and and the data generation and analysis are carried out by respective specialists. It's iterative, and it's undoubtedly going to be slower (at least initially) compared to going solo. But the rewards, I think, are going to be much greater once the team is in the state of ‘flow’.&lt;/p&gt;
&lt;p&gt;In some ways, it reminds me of the problem with finding the ideal “data scientist” - one who could wrangle big amounts of data, make plots, infer conclusions, create interactive dashboards, and communicate the results to business executives. Nonsense, this unicorn doesn’t exist, and the industry quickly figured that out, thankfully, employing data science teams comprised of people with complementary skills.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2016/11/10/book-thoughts-the-theory-that-would-not-die/">
    <title type="text">Book Thoughts: The Theory That Would Not Die</title>
    <id>urn:uuid:be5c7d1f-138a-36e0-ada4-9f9577d9f2f5</id>
    <updated>2016-11-10T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2016/11/10/book-thoughts-the-theory-that-would-not-die/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;One of two eBooks I bought to read on this trip to Vienna was &quot;The Theory That Would Not Die&quot;. It was a good read, and I definitely have come to appreciate more the history behind Bayes' rule and its multiple deaths and resurrections.&lt;/p&gt;
&lt;p&gt;Three things stuck out for me.&lt;/p&gt;
&lt;p&gt;Firstly, I didn't realize how big of a genius Laplace was, and how prior to the two great wars, the epicentre of scientific inquiry was in France. Laplace basically touched a wide variety of foundational topics that later generations have built on, and his mastery of concepts as diverse as probability, calculus and the likes is amazing. I definitely can appreciate how he was able to connect many disciplines together.&lt;/p&gt;
&lt;p&gt;Secondly, many of the great breakthroughs of the past came from people dabbling in a problem for over a decade. Compare that to the expected constant output by professional scientists now. It seems to me that it is a truism that scientific inquiry can only really be conducted under certain circumstances, and funding crunches, KPIs and publication metrics, and distracted service to an academy aren't the ways to get it done.&lt;/p&gt;
&lt;p&gt;Finally, the role of the military was such a catalyst for new advances! Yet the military's role in research results in a paradox. We all want new breakthroughs to be open, freely accessible, and used for peaceful, civilian purposes. Yet the military provides the catalytic impetus for accelerating new technologies and ideas for practical use; not even capitalism has that force. The book highlighted how Bayes remained highly theoretical and impractical in the academic realm for decades after the military already started pushing through practical applications of it.&lt;/p&gt;
&lt;p&gt;All in all, good book, highly recommended to read!&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://www.ericmjl.com/blog/2016/11/10/vienna-and-imed-2016-reflections/">
    <title type="text">Vienna &amp; IMED 2016 Reflections</title>
    <id>urn:uuid:207cf6ae-9c3e-3791-b105-3524b29036be</id>
    <updated>2016-11-10T00:00:00Z</updated>
    <link href="http://www.ericmjl.com/blog/2016/11/10/vienna-and-imed-2016-reflections/" />
    <author>
      <name>Eric J. Ma</name>
    </author>
    <content type="html">&lt;p&gt;This trip &amp; conference was a productive one! I'm glad I went for it and didn't have to miss out on much (even though WebJet/Turkish Airlines (still can't sort out which) messed up my initial flight booking big-time).&lt;/p&gt;
&lt;p&gt;My biggest takeaways from IMED 2016 are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;One Health is a big concept for disease surveillance, and I'm convinced it's the right way to do it. Sample not just humans reactively, but also animals proactively.&lt;/li&gt;
&lt;li&gt;There's a project to &quot;whole genome sequence&quot; viruses from a whole variety of animals, called the Global Virome Project. It'll likely have a longer-term impact on disease forecasting than virus-specific surveillance networks.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ecohealthalliance.org/&quot;&gt;EcoHealth Alliance&lt;/a&gt; (NYC) and &lt;a href=&quot;http://metabiota.com/&quot;&gt;Metabiota&lt;/a&gt; (SF) are doing cool stuff for disease surveillance. &lt;/li&gt;
&lt;li&gt;Made some new friends at the conference. Global conferences are always fun.&lt;/li&gt;
&lt;li&gt;Learned from Drew (of &lt;a href=&quot;http://isid.org/&quot;&gt;ISID&lt;/a&gt;) that conference locations should also coincide with off-peak tourist timing and with commitments over multiple years; it helps build the case for city sponsorship as well. &lt;/li&gt;
&lt;li&gt;Hackathons are fun, though I remain convinced that their main utility is as a catalyst for launching new long-term collaboration efforts, not as a way to advance new ideas.&lt;/li&gt;
&lt;li&gt;Receptions at fancy places (we did the Mayor's hall) are a great way to meet new people. Note to self, if I ever organize a conference myself.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And then there's Vienna. Oh Vienna, what a beautiful old city you are. (Your donairs are awesome, btw.) I took 2 &quot;tourist days&quot; to walk around the city, and get a feel for it.&lt;/p&gt;
&lt;p&gt;I got to do some more iPhone photography, which was a nice change of pace. After finding my way to the Danube, I walked back and took the train to the Vienna city centre. The photos I took were mostly of the architecture, the parks, and activity there. Naturally, I couldn't resist touching up the photos on my computer. Here's &lt;a href=&quot;https://goo.gl/photos/Fn1W1zQ4CbWJM8c79&quot;&gt;an album&lt;/a&gt; of my favourites.&lt;/p&gt;
&lt;p&gt;I noticed that the public transit is amazingly advanced. Amazing, all round.&lt;/p&gt;
&lt;p&gt;That evening, though, was when I felt the stomach bug rumbling, and I realized I had food poisoning. I'm not sure where I got it, though, as it seemed too soon after trying out Schnitzel for the first time; I thought it might have been my body reacting to an overly-oily dinner.&lt;/p&gt;
&lt;p&gt;As such, I spent the second day stroking the cat and catching up on YouTube videos and eBook reading and sleeping in bed. The donair from a store nearby made for a good breakfast though!&lt;/p&gt;
&lt;p&gt;That marks the end of a really fun trip to Vienna. Hope to visit again! And I hope to see the others I met at IMED again!&lt;/p&gt;
</content>
  </entry>
</feed>
